<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Altseed2</name>
    </assembly>
    <members>
        <member name="T:Altseed.AltseedContext">
            <summary>
            Altseed2における<see cref="T:System.Threading.SynchronizationContext"/>
            </summary>
        </member>
        <member name="P:Altseed.AltseedContext.Count">
            <summary>
            溜められた処理の個数を取得する
            </summary>
        </member>
        <member name="P:Altseed.AltseedContext.IsUpdated">
            <summary>
            更新されるかどうかを取得または設定する
            </summary>
        </member>
        <member name="M:Altseed.AltseedContext.Update">
            <summary>
            溜められた処理の実行を行う
            </summary>
        </member>
        <member name="T:Altseed.GraphicsDeviceType">
            <summary>
            描画方法を表します。
            </summary>
        </member>
        <member name="F:Altseed.GraphicsDeviceType.Default">
            <summary>
            実行環境をもとに自動選択
            </summary>
        </member>
        <member name="F:Altseed.GraphicsDeviceType.DirectX">
            <summary>
            DirectX
            </summary>
        </member>
        <member name="F:Altseed.GraphicsDeviceType.Metal">
            <summary>
            Metal
            </summary>
        </member>
        <member name="F:Altseed.GraphicsDeviceType.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="T:Altseed.FramerateMode">
            <summary>
            フレームレートモード
            </summary>
        </member>
        <member name="F:Altseed.FramerateMode.Variable">
            <summary>
            可変フレームレート
            </summary>
        </member>
        <member name="F:Altseed.FramerateMode.Constant">
            <summary>
            固定フレームレート
            </summary>
        </member>
        <member name="T:Altseed.ResourceType">
            <summary>
            リソースの種類を表します。
            </summary>
        </member>
        <member name="F:Altseed.ResourceType.StaticFile">
            <summary>
            <see cref="T:Altseed.StaticFile"/>を表す
            </summary>
        </member>
        <member name="F:Altseed.ResourceType.StreamFile">
            <summary>
            <see cref="T:Altseed.StreamFile"/>を表す
            </summary>
        </member>
        <member name="F:Altseed.ResourceType.Texture2D">
            <summary>
            <see cref="T:Altseed.Texture2D"/>を表す
            </summary>
        </member>
        <member name="F:Altseed.ResourceType.Font">
            <summary>
            <see cref="T:Altseed.Font"/>を表す
            </summary>
        </member>
        <member name="F:Altseed.ResourceType.Sound">
            <summary>
            <see cref="T:Altseed.Sound"/>を表す
            </summary>
        </member>
        <member name="T:Altseed.Keys">
            <summary>
            キーボードのキーの種類を表します。
            </summary>
        </member>
        <member name="F:Altseed.Keys.Unknown">
            <summary>
            未知のキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num0">
            <summary>
            テンキーの0
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num1">
            <summary>
            テンキーの1
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num2">
            <summary>
            テンキーの2
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num3">
            <summary>
            テンキーの3
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num4">
            <summary>
            テンキーの4
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num5">
            <summary>
            テンキーの5
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num6">
            <summary>
            テンキーの6
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num7">
            <summary>
            テンキーの7
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num8">
            <summary>
            テンキーの8
            </summary>
        </member>
        <member name="F:Altseed.Keys.Num9">
            <summary>
            テンキーの9
            </summary>
        </member>
        <member name="F:Altseed.Keys.Right">
            <summary>
            矢印キー右
            </summary>
        </member>
        <member name="F:Altseed.Keys.Left">
            <summary>
            矢印キー左
            </summary>
        </member>
        <member name="F:Altseed.Keys.Down">
            <summary>
            矢印キー下
            </summary>
        </member>
        <member name="F:Altseed.Keys.Up">
            <summary>
            矢印キー上
            </summary>
        </member>
        <member name="F:Altseed.Keys.LeftShift">
            <summary>
            左側のShiftキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.LeftControl">
            <summary>
            左側のCtrlキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.LeftAlt">
            <summary>
            左側のAltキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.LeftWin">
            <summary>
            左側のWinキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.RightShift">
            <summary>
            右側のShiftキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.RightControl">
            <summary>
            右側のCtrlキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.RightAlt">
            <summary>
            右側のAltキー
            </summary>
        </member>
        <member name="F:Altseed.Keys.RightWin">
            <summary>
            右側のWinキー
            </summary>
        </member>
        <member name="T:Altseed.ButtonState">
            <summary>
            ボタンの押下状態を表します。
            </summary>
        </member>
        <member name="F:Altseed.ButtonState.Free">
            <summary>
            ボタンが押されていない状態
            </summary>
        </member>
        <member name="F:Altseed.ButtonState.Push">
            <summary>
            ボタンが押された瞬間の状態
            </summary>
        </member>
        <member name="F:Altseed.ButtonState.Hold">
            <summary>
            ボタンが押されている状態
            </summary>
        </member>
        <member name="F:Altseed.ButtonState.Release">
            <summary>
            ボタンが話された瞬間の状態
            </summary>
        </member>
        <member name="T:Altseed.MouseButtons">
            <summary>
            マウスのボタンの種類を表します。
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.ButtonLeft">
            <summary>
            左ボタン
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.ButtonRight">
            <summary>
            中央ボタン
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.ButtonMiddle">
            <summary>
            右ボタン
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.SubButton1">
            <summary>
            サブボタン1
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.SubButton2">
            <summary>
            サブボタン2
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.SubButton3">
            <summary>
            サブボタン3
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.SubButton4">
            <summary>
            サブボタン4
            </summary>
        </member>
        <member name="F:Altseed.MouseButtons.SubButton5">
            <summary>
            サブボタン5
            </summary>
        </member>
        <member name="T:Altseed.CursorMode">
            <summary>
            カーソルの状態を表します。
            </summary>
        </member>
        <member name="F:Altseed.CursorMode.Normal">
            <summary>
            通常の状態
            </summary>
        </member>
        <member name="F:Altseed.CursorMode.Hidden">
            <summary>
            隠れている状態
            </summary>
        </member>
        <member name="F:Altseed.CursorMode.Disable">
            <summary>
            使用できない状態
            </summary>
        </member>
        <member name="T:Altseed.JoystickType">
            <summary>
            ジョイスティックの種類を表します。
            </summary>
        </member>
        <member name="F:Altseed.JoystickType.Other">
            <summary>
            未知の種類のジョイスティック
            </summary>
        </member>
        <member name="F:Altseed.JoystickType.PS4">
            <summary>
            PlayStation4のジョイスティック
            </summary>
        </member>
        <member name="F:Altseed.JoystickType.XBOX360">
            <summary>
            XBOX360のジョイスティック
            </summary>
        </member>
        <member name="F:Altseed.JoystickType.JoyconL">
            <summary>
            NintendoSwitchの左ジョイスティック
            </summary>
        </member>
        <member name="F:Altseed.JoystickType.JoyconR">
            <summary>
            NintendoSwitchの右ジョイスティック
            </summary>
        </member>
        <member name="T:Altseed.JoystickButtonType">
            <summary>
            ジョイスティックのボタンの種類を表します。
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.Start">
            <summary>
            スタートボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.Select">
            <summary>
            セレクトボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.Home">
            <summary>
            ホームボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.Release">
            <summary>
            リリースボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.Capture">
            <summary>
            キャプチャーボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftUp">
            <summary>
            左十字キー上
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftDown">
            <summary>
            左十字キー下
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftLeft">
            <summary>
            左十字キー左
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftRight">
            <summary>
            左十字キー右
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftPush">
            <summary>
            左
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightUp">
            <summary>
            右十字キー上
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightRight">
            <summary>
            右十字キー右
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightLeft">
            <summary>
            右十字キー左
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightDown">
            <summary>
            右十字キー下
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightPush">
            <summary>
            右
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.L1">
            <summary>
            Lボタン1
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.R1">
            <summary>
            Rボタン1
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.L2">
            <summary>
            Lボタン2
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.R2">
            <summary>
            Rボタン2
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.L3">
            <summary>
            Lボタン3
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.R3">
            <summary>
            Rボタン3
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.LeftStart">
            <summary>
            左スタートボタン
            </summary>
        </member>
        <member name="F:Altseed.JoystickButtonType.RightStart">
            <summary>
            右スタートボタン
            </summary>
        </member>
        <member name="T:Altseed.JoystickAxisType">
            <summary>
            ジョイスティックの軸の種類を表します。
            </summary>
        </member>
        <member name="T:Altseed.BuiltinShaderType">
            <summary>
            ビルド済みシェーダの種類を表します
            </summary>
        </member>
        <member name="T:Altseed.WritingDirection">
            <summary>
            テキストの描画方向
            </summary>
        </member>
        <member name="F:Altseed.WritingDirection.Vertical">
            <summary>
            縦書き
            </summary>
        </member>
        <member name="F:Altseed.WritingDirection.Horizontal">
            <summary>
            横書き
            </summary>
        </member>
        <member name="T:Altseed.RenderTargetCareType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.RenderTargetCareType.DontCare">
            <summary>
            クリアしない
            </summary>
        </member>
        <member name="F:Altseed.RenderTargetCareType.Clear">
            <summary>
            クリアする
            </summary>
        </member>
        <member name="T:Altseed.ToolDir">
            <summary>
            ツール機能で使用する方向
            </summary>
        </member>
        <member name="F:Altseed.ToolDir.Left">
            <summary>
            左方向
            </summary>
        </member>
        <member name="F:Altseed.ToolDir.Right">
            <summary>
            右方向
            </summary>
        </member>
        <member name="F:Altseed.ToolDir.Up">
            <summary>
            上方向
            </summary>
        </member>
        <member name="F:Altseed.ToolDir.Down">
            <summary>
            下方向
            </summary>
        </member>
        <member name="T:Altseed.ToolCond">
            <summary>
            バイナリ演算子を使用して複数の値を結合しないでください
            </summary>
        </member>
        <member name="F:Altseed.ToolCond.Always">
            <summary>
            常に変数を設定します
            </summary>
        </member>
        <member name="F:Altseed.ToolCond.Once">
            <summary>
            ランタイムセッションごとに変数を1回設定します（成功した最初の呼び出しのみ）
            </summary>
        </member>
        <member name="F:Altseed.ToolCond.FirstUseEver">
            <summary>
            オブジェクト/ウィンドウに永続的に保存されたデータがない場合（.iniファイルにエントリがない場合）、変数を設定します
            </summary>
        </member>
        <member name="F:Altseed.ToolCond.Appearing">
            <summary>
            オブジェクト/ウィンドウが非表示/非アクティブになった後（または初めて）表示される場合は、変数を設定します
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.Selected">
            <summary>
            Draw as selected
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.Framed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.AllowItemOverlap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.NoTreePushOnOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.NoAutoOpenOnLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.DefaultOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.OpenOnDoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.OpenOnArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.Leaf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.Bullet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.FramePadding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.SpanAvailWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.SpanFullWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolTreeNode.NavLeftJumpsBackHere">
            <summary>
            
            </summary>
        </member>
        <member name="T:Altseed.ToolInputText">
            <summary>
            ツール機能においてインプットされるテキストの設定を表します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CharsDecimal">
            <summary>
            0123456789.+-*/ を許可します。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CharsHexadecimal">
            <summary>
            0123456789ABCDEFabcdef を許可します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CharsUppercase">
            <summary>
            a..z を A..Z に変換します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CharsNoBlank">
            <summary>
            スペースとタブを除外します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.AutoSelectAll">
            <summary>
            最初にマウスフォーカスしたときにテキスト全体を選択します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.EnterReturnsTrue">
            <summary>
            （値が変更されるたびにではなく）Enterが押されたときに `true` を返します。 `IsItemDeactivatedAfterEdit()` 関数を調べることを検討してください。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CallbackCompletion">
            <summary>
            Tabキーを押したときのコールバック（完了処理のため）
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CallbackHistory">
            <summary>
            上下矢印を押すとコールバック（履歴処理用）
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CallbackAlways">
            <summary>
            各反復でのコールバック。 ユーザーコードは、カーソル位置を照会し、テキストバッファーを変更できます。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CallbackCharFilter">
            <summary>
            置換または破棄する文字入力のコールバック。 'EventChar'を変更して置換または破棄するか、コールバックで1を返して破棄します。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.AllowTabInput">
            <summary>
            Tabキーを押すと、テキストフィールドに'\t'という文字が入力されます。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CtrlEnterForNewLine">
            <summary>
            複数行モードでは、Enterでフォーカスを外し、Ctrl + Enterで新しい行を追加します（デフォルトは反対です：Ctrl + Enterでフォーカスを外し、Enterで行を追加します）。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.NoHorizontalScroll">
            <summary>
            カーソルの水平方向のフォローを無効にする
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.AlwaysInsertMode">
            <summary>
            インサートモード
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.ReadOnly">
            <summary>
            読み取り専用モード
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.Password">
            <summary>
            パスワードモード。すべての文字を'*'として表示します。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.NoUndoRedo">
            <summary>
            元に戻す/やり直しを無効にします。 アクティブな間は入力テキストがテキストデータを所有していることに注意してください。独自の元に戻す/やり直しスタックを提供する場合は、たとえば ClearActiveID（）を呼び出します。
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CharsScientific">
            <summary>
            0123456789.+-*/eE (科学表記法の入力) を許可します
            </summary>
        </member>
        <member name="F:Altseed.ToolInputText.CallbackResize">
            <summary>
            バッファ容量のコールバックはリクエストを変更し（'buf_size 'パラメータ値を超えて）、文字列が大きくなります。 文字列のサイズを変更する必要がある場合に通知します（サイズのキャッシュを保持する文字列タイプの場合）。 コールバックで新しいBufSizeが提供され、それを尊重する必要があります。
            </summary>
        </member>
        <member name="T:Altseed.ToolColorEdit">
            <summary>
            ツール機能における色の設定を表します
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoAlpha">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: Alphaコンポーネントを無視します（入力ポインターから3つのコンポーネントのみを読み取ります）。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoPicker">
            <summary>
            `ColorEdit`: 色付きの正方形をクリックしたときにピッカーを無効にします。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoOptions">
            <summary>
            `ColorEdit`: 入力/小さなプレビューを右クリックしたときのオプションメニューの切り替えを無効にします。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoSmallPreview">
            <summary>
            `ColorEdit, ColorPicker`: 入力の横にある色付きの正方形プレビューを無効にします。 （例：入力のみを表示する）
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoInputs">
            <summary>
            `ColorEdit, ColorPicker: 入力スライダー/テキストウィジェットを無効にします（たとえば、小さなプレビューの色付きの四角形のみを表示します）。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoTooltip">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: プレビューをホバーするときにツールチップを無効にします。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoLabel">
            <summary>
            `ColorEdit, ColorPicker`: インラインテキストラベルの表示を無効にします（ラベルは引き続きツールチップとピッカーに転送されます）。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoSidePreview">
            <summary>
            `ColorPicker`: ピッカーの右側の大きなカラープレビューを無効にし、代わりに小さな色付きの正方形プレビューを使用します。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.NoDragDrop">
            <summary>
            `ColorEdit`: ドラッグアンドドロップターゲットを無効にします。 `ColorButton`: ドラッグアンドドロップソースを無効にします。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.AlphaBar">
            <summary>
            `ColorEdit, ColorPicker`: ピッカーに垂直アルファバー/グラデーションを表示します。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.AlphaPreview">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: プレビューを不透明ではなく、チェッカーボード上の透明色として表示します。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.AlphaPreviewHalf">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: 不透明ではなく、半不透明/半市松模様を表示します。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.HDR">
            <summary>
            `(WIP) ColorEdit`: 現在、RGBAエディションで0.0f..1.0fの制限のみを無効にします（注：おそらくFloatフラグも使用したいでしょう）。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.DisplayRGB">
            <summary>
            `ColorEdit`: RGB/HSV/Hexの_display_タイプをオーバーライドします。 `ColorPicker`: 1つ以上のRGB/HSV/Hexを使用して任意の組み合わせを選択します。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.DisplayHSV">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.DisplayHex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.Uint8">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: 0..255としてフォーマットされた_display_値。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.Float">
            <summary>
            `ColorEdit, ColorPicker, ColorButton`: _display_値は、0..255整数ではなく0.0f..1.0f浮動小数点としてフォーマットされます。 整数による値の往復はありません。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.PickerHueBar">
            <summary>
            `ColorPicker`: Hueのバー、Sat/Valueの長方形。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.PickerHueWheel">
            <summary>
            `ColorPicker`: Hueのホイール、Sat/Valueの三角形。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.InputRGB">
            <summary>
            `ColorEdit, ColorPicker`: RGB形式の入出力データ
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.InputHSV">
            <summary>
            `ColorEdit, ColorPicker`: HSV形式の入力および出力データ。
            </summary>
        </member>
        <member name="F:Altseed.ToolColorEdit.OptionsDefault">
            <summary>
            デフォルトオプション。 `SetColorEditOptions()` を使用して、アプリケーションのデフォルトを設定できます。 意図はおそらくあなたの呼び出しのほとんどでそれらをオーバーライドしたくないことです。 ユーザーがオプションメニューから選択できるようにするか、起動時に`SetColorEditOptions()`を1回呼び出します。
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.DontClosePopups">
            <summary>
            このボタンをクリックしても、親ポップアップウィンドウは閉じません
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.SpanAllColumns">
            <summary>
            選択可能なフレームはすべての列にまたがることができます（テキストは現在の列に収まります）
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.AllowDoubleClick">
            <summary>
            ダブルクリックした場合もプレスイベントを生成
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.Disabled">
            <summary>
            選択できません、グレー表示されたテキストを表示します
            </summary>
        </member>
        <member name="F:Altseed.ToolSelectable.AllowItemOverlap">
            <summary>
            (WIP) ヒットテストにより、後続のウィジェットがこのウィジェットとオーバーラップできるようにします
            </summary>
        </member>
        <member name="T:Altseed.ToolWindow">
            <summary>
            ツール機能のウィンドウにおける設定を表します
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoTitleBar">
            <summary>
            タイトルバーを無効にする
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoResize">
            <summary>
            右下のグリップを使ったユーザーのサイズ変更を無効にします
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoMove">
            <summary>
            ユーザーがウィンドウを移動できないようにする
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoScrollbar">
            <summary>
            スクロールバーを無効にします（ウィンドウはマウスまたはプログラムでスクロールできます）
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoScrollWithMouse">
            <summary>
            ユーザーがマウスホイールで垂直にスクロールできないようにします。 子ウィンドウでは、NoScrollbarも設定されていない限り、マウスホイールは親に転送されます。
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoCollapse">
            <summary>
            ユーザー折りたたみウィンドウをダブルクリックして無効にします
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.AlwaysAutoResize">
            <summary>
            フレームごとにコンテンツごとにウィンドウのサイズを変更します
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoBackground">
            <summary>
            描画背景色(`WindowBg`など)および外枠を無効にします。 `SetNextWindowBgAlpha(0.0f)`を使用する場合と同様です。
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoSavedSettings">
            <summary>
            .iniファイルの設定をロード/保存しない
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoMouseInputs">
            <summary>
            パススルーでテストをホバリング、キャッチマウスを無効にします。
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.MenuBar">
            <summary>
            メニューバーがあります
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.HorizontalScrollbar">
            <summary>
            水平スクロールバーの表示を許可します（デフォルトではオフ）。 `Begin()`を呼び出す前に、`SetNextWindowContentSize(Vector2F(width, 0.0f));`を使用して幅を指定できます。
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoFocusOnAppearing">
            <summary>
            非表示から表示状態に移行するときにフォーカスを取得できないようにします
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoBringToFrontOnFocus">
            <summary>
            フォーカスを取得するときにウィンドウを前面に移動することを無効にします（たとえば、クリックするか、プログラムでフォーカスを与える）
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Altseed.ToolWindow.AlwaysVerticalScrollbar" -->
        <!-- Badly formed XML comment ignored for member "F:Altseed.ToolWindow.AlwaysHorizontalScrollbar" -->
        <member name="F:Altseed.ToolWindow.AlwaysUseWindowPadding">
            <summary>
            境界線のない子ウィンドウが`style.WindowPadding`を使用するようにします（境界線のない子ウィンドウではデフォルトで無視されるため、より便利です）
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoNavInputs">
            <summary>
            ウィンドウ内にゲームパッド/キーボードナビゲーションはありません
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.NoNavFocus">
            <summary>
            ゲームパッド/キーボードナビゲーションでこのウィンドウにフォーカスしない（たとえば、CTRL + TABでスキップ）
            </summary>
        </member>
        <member name="F:Altseed.ToolWindow.UnsavedDocument">
            <summary>
            ###演算子の使用を避けるために、IDに影響を与えずにタイトルに'*'を追加します。 タブ/ドッキングコンテキストで使用する場合、クロージャーでタブが選択され、クロージャーは1フレーム延期され、コードがちらつきなしに（確認ポップアップなどを使用して）クロージャーをキャンセルできるようにします。
            </summary>
        </member>
        <member name="T:Altseed.ToolTabBar">
            <summary>
            ツール機能のタブバーにおける設定を表します
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.Reorderable">
            <summary>
            タブを手動でドラッグして並べ替えることができます+リストの最後に新しいタブが追加されます
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.AutoSelectNewTabs">
            <summary>
            新しいタブが表示されたら自動的に選択する
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.TabListPopupButton">
            <summary>
            ボタンを無効にしてタブリストポップアップを開きます
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Altseed.ToolTabBar.NoCloseWithMiddleMouseButton" -->
        <member name="F:Altseed.ToolTabBar.NoTabListScrollingButtons">
            <summary>
            スクロールボタンを無効にする（フィッティングポリシーが`FittingPolicyScroll`の場合に適用）
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.NoTooltip">
            <summary>
            タブをホバーするときにツールチップを無効にする
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.FittingPolicyResizeDown">
            <summary>
            収まらないタブのサイズを変更する
            </summary>
        </member>
        <member name="F:Altseed.ToolTabBar.FittingPolicyScroll">
            <summary>
            タブが収まらない場合にスクロールボタンを追加する
            </summary>
        </member>
        <member name="T:Altseed.ToolGlyphRanges">
            <summary>
            ツール機能を使ってフォントを読み込む際の範囲を指定します。ビット演算は行わないでください。
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.Cyrillic">
            <summary>
            キリル文字
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.Japanese">
            <summary>
            日本語
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.ChineseFull">
            <summary>
            繁体字中国語
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.ChineseSimplifiedCommon">
            <summary>
            簡体字中国語
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.Korean">
            <summary>
            韓国語
            </summary>
        </member>
        <member name="F:Altseed.ToolGlyphRanges.Thai">
            <summary>
            タイ語
            </summary>
        </member>
        <member name="T:Altseed.FFTWindow">
            <summary>
            音のスペクトル解析に使用する窓関数
            </summary>
        </member>
        <member name="T:Altseed.LogLevel">
            <summary>
            ログレベルを表します。
            </summary>
        </member>
        <member name="T:Altseed.LogCategory">
            <summary>
            ログの範囲を表します。
            </summary>
        </member>
        <member name="T:Altseed.Configuration">
            <summary>
            Altseed2 の設定を表すクラス
            </summary>
        </member>
        <member name="P:Altseed.Configuration.IsFullscreen">
            <summary>
            全画面モードかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.IsResizable">
            <summary>
            画面サイズ可変かどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.DeviceType">
            <summary>
            描画方法を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.WaitVSync">
            <summary>
            垂直同期信号を待つかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.ConsoleLoggingEnabled">
            <summary>
            ログをコンソールに出力するかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.FileLoggingEnabled">
            <summary>
            ログをファイルに出力するかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.LogFileName">
            <summary>
            ログファイル名を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Configuration.ToolEnabled">
            <summary>
            ツール機能を使用するかどうかを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.Configuration.#ctor">
            <summary>
            新しいインスタンスを生成します。
            </summary>
        </member>
        <member name="M:Altseed.Configuration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Configuration"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Configuration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Configuration.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="T:Altseed.Core">
            <summary>
            C++のCoreとの仲介を担うクラス
            </summary>
        </member>
        <member name="P:Altseed.Core.DeltaSecond">
            <summary>
            前のフレームからの経過時間(秒)を取得します。
            </summary>
        </member>
        <member name="P:Altseed.Core.CurrentFPS">
            <summary>
            現在のFPSを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Core.TargetFPS">
            <summary>
            目標のFPSを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Core.FramerateMode">
            <summary>
            フレームレートモードを取得または設定します。デフォルトでは可変フレームレートです。
            </summary>
        </member>
        <member name="M:Altseed.Core.Initialize(System.String,System.Int32,System.Int32,Altseed.Configuration)">
            <summary>
            初期化処理を行います。
            </summary>
            <param name="title">ウィンドウの左上に表示されるウィンドウん名</param>
            <param name="width">ウィンドウの横幅</param>
            <param name="height">ウィンドウの縦幅</param>
            <param name="config">初期化時の設定</param>
            <returns>初期化処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Core.DoEvent">
            <summary>
            イベントを実行します。
            </summary>
            <returns>イベントが進行出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Core.Terminate">
            <summary>
            終了処理を行います。
            </summary>
        </member>
        <member name="M:Altseed.Core.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="T:Altseed.Int8Array">
            <summary>
            8ビット整数の配列のクラスを表します。
            </summary>
        </member>
        <member name="P:Altseed.Int8Array.Count">
            <summary>
            格納されている要素の数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Int8Array.Clear">
            <summary>
            データをクリアします。
            </summary>
        </member>
        <member name="M:Altseed.Int8Array.Resize(System.Int32)">
            <summary>
            サイズを変更します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Int8Array.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインタにコピーします。
            </summary>
            <param name="ptr">ポインタ</param>
        </member>
        <member name="M:Altseed.Int8Array.GetAt(System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
        </member>
        <member name="M:Altseed.Int8Array.SetAt(System.Int32,System.Byte)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
            <param name="value">値</param>
        </member>
        <member name="M:Altseed.Int8Array.Create(System.Int32)">
            <summary>
            インスタンスを作成します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Int8Array.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Int8Array"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Int8Array.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Int8Array.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Int8Array.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Int8Array.Int8Array_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="M:Altseed.Int8Array.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Count"><see cref="P:Altseed.Int8Array.Count"/></param>
        </member>
        <member name="P:Altseed.Int8Array.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.Int8Array.Count"/>以上</exception>
        </member>
        <member name="T:Altseed.Int32Array">
            <summary>
            32ビット整数の配列のクラスを表します。
            </summary>
        </member>
        <member name="P:Altseed.Int32Array.Count">
            <summary>
            格納されている要素の数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Int32Array.Clear">
            <summary>
            データをクリアします。
            </summary>
        </member>
        <member name="M:Altseed.Int32Array.Resize(System.Int32)">
            <summary>
            サイズを変更します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Int32Array.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインタにコピーします。
            </summary>
            <param name="ptr">ポインタ</param>
        </member>
        <member name="M:Altseed.Int32Array.GetAt(System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
        </member>
        <member name="M:Altseed.Int32Array.SetAt(System.Int32,System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
            <param name="value">値</param>
        </member>
        <member name="M:Altseed.Int32Array.Create(System.Int32)">
            <summary>
            インスタンスを作成します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Int32Array.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Int32Array"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Int32Array.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Int32Array.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Int32Array.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Int32Array.Int32Array_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="M:Altseed.Int32Array.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Count"><see cref="P:Altseed.Int32Array.Count"/></param>
        </member>
        <member name="P:Altseed.Int32Array.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.Int32Array.Count"/>以上</exception>
        </member>
        <member name="T:Altseed.VertexArray">
            <summary>
            頂点データの配列のクラスを表します。
            </summary>
        </member>
        <member name="P:Altseed.VertexArray.Count">
            <summary>
            格納されている要素の数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.VertexArray.Clear">
            <summary>
            データをクリアします。
            </summary>
        </member>
        <member name="M:Altseed.VertexArray.Resize(System.Int32)">
            <summary>
            サイズを変更します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.VertexArray.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインタにコピーします。
            </summary>
            <param name="ptr">ポインタ</param>
        </member>
        <member name="M:Altseed.VertexArray.GetAt(System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
        </member>
        <member name="M:Altseed.VertexArray.SetAt(System.Int32,Altseed.Vertex)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
            <param name="value">値</param>
        </member>
        <member name="M:Altseed.VertexArray.Create(System.Int32)">
            <summary>
            インスタンスを作成します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.VertexArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.VertexArray"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.VertexArray.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.VertexArray.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.VertexArray.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.VertexArray.VertexArray_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="M:Altseed.VertexArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Count"><see cref="P:Altseed.VertexArray.Count"/></param>
        </member>
        <member name="P:Altseed.VertexArray.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.VertexArray.Count"/>以上</exception>
        </member>
        <member name="T:Altseed.FloatArray">
            <summary>
            浮動小数点数の配列のクラスを表します。
            </summary>
        </member>
        <member name="P:Altseed.FloatArray.Count">
            <summary>
            格納されている要素の数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.FloatArray.Clear">
            <summary>
            データをクリアします。
            </summary>
        </member>
        <member name="M:Altseed.FloatArray.Resize(System.Int32)">
            <summary>
            サイズを変更します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.FloatArray.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインタにコピーします。
            </summary>
            <param name="ptr">ポインタ</param>
        </member>
        <member name="M:Altseed.FloatArray.GetAt(System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
        </member>
        <member name="M:Altseed.FloatArray.SetAt(System.Int32,System.Single)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
            <param name="value">値</param>
        </member>
        <member name="M:Altseed.FloatArray.Create(System.Int32)">
            <summary>
            インスタンスを作成します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.FloatArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.FloatArray"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.FloatArray.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.FloatArray.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.FloatArray.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.FloatArray.FloatArray_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="M:Altseed.FloatArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Count"><see cref="P:Altseed.FloatArray.Count"/></param>
        </member>
        <member name="P:Altseed.FloatArray.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.FloatArray.Count"/>以上</exception>
        </member>
        <member name="T:Altseed.Vector2FArray">
            <summary>
            2次元ベクトルの配列のクラスを表します。
            </summary>
        </member>
        <member name="P:Altseed.Vector2FArray.Count">
            <summary>
            格納されている要素の数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Vector2FArray.Clear">
            <summary>
            データをクリアします。
            </summary>
        </member>
        <member name="M:Altseed.Vector2FArray.Resize(System.Int32)">
            <summary>
            サイズを変更します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Vector2FArray.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインタにコピーします。
            </summary>
            <param name="ptr">ポインタ</param>
        </member>
        <member name="M:Altseed.Vector2FArray.GetAt(System.Int32)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
        </member>
        <member name="M:Altseed.Vector2FArray.SetAt(System.Int32,Altseed.Vector2F)">
            <summary>
            インデックスアクセス
            </summary>
            <param name="index">インデックス</param>
            <param name="value">値</param>
        </member>
        <member name="M:Altseed.Vector2FArray.Create(System.Int32)">
            <summary>
            インスタンスを作成します。
            </summary>
            <param name="size">要素数</param>
        </member>
        <member name="M:Altseed.Vector2FArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Vector2FArray"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Vector2FArray.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Vector2FArray.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Vector2FArray.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Vector2FArray.Vector2FArray_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="M:Altseed.Vector2FArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Count"><see cref="P:Altseed.Vector2FArray.Count"/></param>
        </member>
        <member name="P:Altseed.Vector2FArray.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.Vector2FArray.Count"/>以上</exception>
        </member>
        <member name="T:Altseed.Resources">
            <summary>
            リソースのクラスを表します。
            </summary>
        </member>
        <member name="M:Altseed.Resources.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.Resources.GetResourcesCount(Altseed.ResourceType)">
            <summary>
            指定した種類のリソースの個数を返します。
            </summary>
            <param name="type">個数を検索するリソースの種類</param>
            <returns>指定した種類のリソースの個数</returns>
        </member>
        <member name="M:Altseed.Resources.Clear">
            <summary>
            登録されたリソースをすべて削除します。
            </summary>
        </member>
        <member name="M:Altseed.Resources.Reload">
            <summary>
            リソースの再読み込みを行います。
            </summary>
        </member>
        <member name="T:Altseed.Cursor">
            <summary>
            カーソルを表します。
            </summary>
        </member>
        <member name="M:Altseed.Cursor.Create(System.String,Altseed.Vector2I)">
            <summary>
            指定したpng画像を読み込んだ<see cref="T:Altseed.Cursor"/>のインスタンスを生成します。
            </summary>
            <param name="path">読み込むpng画像のパス</param>
            <param name="hot">カーソルのクリック判定座標を指定します。カーソル画像はここが中心となります。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>指定したpng画像を読み込んだ<see cref="T:Altseed.Cursor"/>のインスタンス</returns>
        </member>
        <member name="T:Altseed.Keyboard">
            <summary>
            キーボードを表します。
            </summary>
        </member>
        <member name="M:Altseed.Keyboard.GetKeyState(Altseed.Keys)">
            <summary>
            キーの状態を取得します。
            </summary>
            <param name="key">キー</param>
            <returns>ボタンの押下状態</returns>
        </member>
        <member name="M:Altseed.Keyboard.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="T:Altseed.Mouse">
            <summary>
            マウスを表します。
            </summary>
        </member>
        <member name="P:Altseed.Mouse.Position">
            <summary>
            マウスカーソルの座標を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Mouse.CursorMode">
            <summary>
            カーソルのモードを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Mouse.Wheel">
            <summary>
            マウスホイールの回転量を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Mouse.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.Mouse.GetMouseButtonState(Altseed.MouseButtons)">
            <summary>
            マウスボタンの状態を取得します。
            </summary>
            <param name="button">状態を取得するマウスのボタン</param>
            <returns>マウスボタンの状態</returns>
        </member>
        <member name="M:Altseed.Mouse.SetCursorImage(Altseed.Cursor)">
            <summary>
            カーソル画像をセットします。
            </summary>
            <param name="cursor">状態を取得するマウスのボタン</param>
        </member>
        <member name="T:Altseed.Joystick">
            <summary>
            ジョイスティックを表すクラス
            </summary>
        </member>
        <member name="M:Altseed.Joystick.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.Joystick.IsPresent(System.Int32)">
            <summary>
            指定したジョイスティックが親であるかどうかを取得します。
            </summary>
            <param name="joystickIndex">ジョイスティックのインデックス</param>
            <returns>指定したジョイスティックが親であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Joystick.RefreshConnectedState">
            <summary>
            接続の状態をリセットします。
            </summary>
        </member>
        <member name="M:Altseed.Joystick.GetButtonStateByIndex(System.Int32,System.Int32)">
            <summary>
            ボタンの状態をインデックスで取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="buttonIndex">状態を検索するボタンのインデックス</param>
            <returns>指定インデックスのボタンの状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetButtonStateByType(System.Int32,Altseed.JoystickButtonType)">
            <summary>
            ボタンの状態を種類から取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="type">状態を検索するボタンの種類</param>
            <returns>指定種類のボタンの状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetJoystickType(System.Int32)">
            <summary>
            指定インデックスのジョイスティックの種類を取得します。
            </summary>
            <param name="index">種類を取得するジョイスティックのインデックス</param>
            <returns>指定インデックスのジョイスティックの種類</returns>
        </member>
        <member name="M:Altseed.Joystick.GetAxisStateByIndex(System.Int32,System.Int32)">
            <summary>
            軸の状態をインデックスで取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="axisIndex">状態を検索する軸のインデックス</param>
            <returns>指定インデックスの軸の状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetAxisStateByType(System.Int32,Altseed.JoystickAxisType)">
            <summary>
            軸の状態を軸の種類で取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="type">状態を検索する軸の種類</param>
            <returns>指定種類の軸の状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetJoystickName(System.Int32)">
            <summary>
            ジョイスティックの名前を取得します。
            </summary>
            <param name="index">名前を検索するジョイスティックのインデックス</param>
            <returns>指定したインデックスのジョイスティックの名前</returns>
        </member>
        <member name="M:Altseed.Joystick.Vibrate(System.Int32,System.Single,System.Single)">
            <summary>
            指定したジョイスティックコントローラーを振動させます
            </summary>
            <param name="index">ジョイスティックのインデックス</param>
            <param name="frequency">周波数</param>
            <param name="amplitude">振幅</param>
        </member>
        <member name="P:Altseed.Joystick.MaxCount">
            <summary>
            ジョイスティックの最大同時接続数を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Joystick.GetButtonState(System.Int32,System.Int32)">
            <summary>
            ボタンの状態をインデックスで取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="buttonIndex">状態を検索するボタンのインデックス</param>
            <returns>指定インデックスのボタンの状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetButtonState(System.Int32,Altseed.JoystickButtonType)">
            <summary>
            ボタンの状態を種類から取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="type">状態を検索するボタンの種類</param>
            <returns>指定種類のボタンの状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetAxisState(System.Int32,System.Int32)">
            <summary>
            軸の状態をインデックスで取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="axisIndex">状態を検索する軸のインデックス</param>
            <returns>指定インデックスの軸の状態</returns>
        </member>
        <member name="M:Altseed.Joystick.GetAxisState(System.Int32,Altseed.JoystickAxisType)">
            <summary>
            軸の状態を軸の種類で取得します。
            </summary>
            <param name="joystickIndex">検索するジョイスティックのインデックス</param>
            <param name="type">状態を検索する軸の種類</param>
            <returns>指定種類の軸の状態</returns>
        </member>
        <member name="T:Altseed.Graphics">
            <summary>
            グラフィックの制御を行うクラス
            </summary>
        </member>
        <member name="P:Altseed.Graphics.BuiltinShader">
            <summary>
            組み込みのシェーダを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Graphics.ClearColor">
            <summary>
            クリア色を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.Graphics.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.Graphics.BeginFrame">
            <summary>
            描画を開始します。
            </summary>
            <returns>正常に開始した場合は　true 。それ以外の場合は false。</returns>
        </member>
        <member name="M:Altseed.Graphics.EndFrame">
            <summary>
            描画を終了します。
            </summary>
            <returns>正常に終了した場合は　true 。それ以外の場合は false。</returns>
        </member>
        <member name="M:Altseed.Graphics.DoEvents">
            <summary>
            イベントを処理します。
            </summary>
            <returns>正常に処理した場合は　true 。それ以外の場合は false。</returns>
        </member>
        <member name="T:Altseed.TextureBase">
            <summary>
            テクスチャのベースクラス
            </summary>
        </member>
        <member name="P:Altseed.TextureBase.Size">
            <summary>
            テクスチャの大きさ(ピクセル)を取得します。
            </summary>
        </member>
        <member name="M:Altseed.TextureBase.Save(System.String)">
            <summary>
            png画像として保存します
            </summary>
            <param name="path">保存先</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>成功したか否か</returns>
        </member>
        <member name="M:Altseed.TextureBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.TextureBase"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.TextureBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.TextureBase.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.TextureBase.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.TextureBase.TextureBase_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,Altseed.Vector2I@)">
            <summary>
            <see cref="M:Altseed.TextureBase.OnDeserialization(System.Object)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Size"><see cref="P:Altseed.TextureBase.Size"/></param>
        </member>
        <member name="M:Altseed.TextureBase.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="T:Altseed.Texture2D">
            <summary>
            テクスチャのクラス
            </summary>
        </member>
        <member name="P:Altseed.Texture2D.Path">
            <summary>
            読み込んだファイルのパスを取得します。
            </summary>
        </member>
        <member name="M:Altseed.Texture2D.Load(System.String)">
            <summary>
            指定したファイルからテクスチャを読み込みます。
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>テクスチャ</returns>
        </member>
        <member name="M:Altseed.Texture2D.Reload">
            <summary>
            再読み込みを行います。
            </summary>
            <returns>再読み込みに成功したら true。それ以外の場合は false</returns>
        </member>
        <member name="M:Altseed.Texture2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Texture2D"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Texture2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Texture2D.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Texture2D.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Texture2D.Texture2D_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.String@)">
            <summary>
            <see cref="M:Altseed.Texture2D.OnDeserialization(System.Object)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Path"><see cref="P:Altseed.Texture2D.Path"/></param>
        </member>
        <member name="M:Altseed.Texture2D.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="M:Altseed.Texture2D.LoadStrict(System.String)">
            <summary>
            指定パスからテクスチャを読み込む
            </summary>
            <param name="path">読み込むテクスチャのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる、または使用出来ない文字を含んでいる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたテクスチャが見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定するパスが見つからない</exception>
            <exception cref="T:System.SystemException">テクスチャが破損または読み込みに失敗</exception>
            <returns><paramref name="path"/>をパスに持つテクスチャのデータを格納した<see cref="T:Altseed.Texture2D"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Texture2D.LoadAsync(System.String)">
            <summary>
            非同期読み込みを行う
            </summary>
            <param name="path">読み込むパス</param>
            <returns></returns>
        </member>
        <member name="T:Altseed.RenderTexture">
            <summary>
            ポストエフェクトやカメラにおける描画先のクラス
            </summary>
        </member>
        <member name="M:Altseed.RenderTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RenderTexture"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RenderTexture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RenderTexture.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RenderTexture.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.RenderTexture.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="T:Altseed.Material">
            <summary>
            マテリアル
            </summary>
        </member>
        <member name="M:Altseed.Material.#ctor">
            <summary>
            新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:Altseed.Material.GetVector4F(System.String)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.Vector4F"/>のインスタンスを取得する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.Vector4F"/>のインスタンスの名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を名前として持つ<see cref="T:Altseed.Vector4F"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed.Material.SetVector4F(System.String,Altseed.Vector4F)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.Vector4F"/>の値を設定する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.Vector4F"/>のインスタンスの名前</param>
            <param name="value">設定する<see cref="T:Altseed.Vector4F"/>のインスタンスの値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:Altseed.Material.GetMatrix44F(System.String)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.Matrix44F"/>のインスタンスを取得する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.Matrix44F"/>のインスタンスの名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を名前として持つ<see cref="T:Altseed.Matrix44F"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed.Material.SetMatrix44F(System.String,Altseed.Matrix44F)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.Matrix44F"/>の値を設定する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.Matrix44F"/>のインスタンスの名前</param>
            <param name="value">設定する<see cref="T:Altseed.Matrix44F"/>のインスタンスの値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:Altseed.Material.GetTexture(System.String)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.TextureBase"/>のインスタンスを取得する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.TextureBase"/>のインスタンスの名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を名前として持つ<see cref="T:Altseed.TextureBase"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed.Material.SetTexture(System.String,Altseed.TextureBase)">
            <summary>
            指定した名前を持つ<see cref="T:Altseed.TextureBase"/>の値を設定する
            </summary>
            <param name="key">検索する<see cref="T:Altseed.TextureBase"/>のインスタンスの名前</param>
            <param name="value">設定する<see cref="T:Altseed.TextureBase"/>のインスタンスの値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:Altseed.Material.GetShader(Altseed.ShaderStageType)">
            <summary>
            指定した種類のシェーダを取得する
            </summary>
            <param name="shaderStage">検索するシェーダのタイプ</param>
            <returns><paramref name="shaderStage"/>に一致するタイプのシェーダ</returns>
        </member>
        <member name="M:Altseed.Material.SetShader(Altseed.Shader)">
            <summary>
            シェーダを設定する
            </summary>
            <param name="shader">設定するシェーダ</param>
        </member>
        <member name="T:Altseed.Renderer">
            <summary>
            レンダラのクラス
            </summary>
        </member>
        <member name="M:Altseed.Renderer.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.Renderer.DrawSprite(Altseed.RenderedSprite)">
            <summary>
            スプライトを描画します。
            </summary>
            <param name="sprite">描画する<see cref="T:Altseed.RenderedSprite"/>のインスタンス</param>
        </member>
        <member name="M:Altseed.Renderer.DrawText(Altseed.RenderedText)">
            <summary>
            テキストを描画します。
            </summary>
            <param name="text">描画する<see cref="T:Altseed.RenderedText"/>のインスタンス</param>
        </member>
        <member name="M:Altseed.Renderer.DrawPolygon(Altseed.RenderedPolygon)">
            <summary>
            ポリゴンを描画します。
            </summary>
            <param name="polygon">描画する<see cref="T:Altseed.RenderedPolygon"/>のインスタンス</param>
        </member>
        <member name="M:Altseed.Renderer.Render">
            <summary>
            コマンドリストを描画します。
            </summary>
        </member>
        <member name="M:Altseed.Renderer.SetCamera(Altseed.RenderedCamera)">
            <summary>
            使用するカメラを設定します。
            </summary>
            <param name="commandList">描画するカメラ</param>
        </member>
        <member name="M:Altseed.Renderer.ResetCamera">
            <summary>
            使用するカメラの設定をリセットします。
            </summary>
        </member>
        <member name="T:Altseed.CommandList">
            <summary>
            コマンドリストのクラス
            </summary>
        </member>
        <member name="M:Altseed.CommandList.SetRenderTargetWithScreen">
            <summary>
            ？
            </summary>
        </member>
        <member name="T:Altseed.Rendered">
            <summary>
            描画されるオブジェクトの基本クラスを表します
            </summary>
        </member>
        <member name="P:Altseed.Rendered.Transform">
            <summary>
            変換行列を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.Rendered.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Rendered"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Rendered.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Rendered.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Rendered.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.RenderedSprite">
            <summary>
            スプライトのクラス
            </summary>
        </member>
        <member name="P:Altseed.RenderedSprite.Texture">
            <summary>
            テクスチャを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedSprite.Src">
            <summary>
            描画範囲を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedSprite.Material">
            <summary>
            マテリアルを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedSprite.Create">
            <summary>
            スプライトを作成します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedSprite.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RenderedSprite"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RenderedSprite.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RenderedSprite.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RenderedSprite.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.RenderedText">
            <summary>
            テキストのクラス
            </summary>
        </member>
        <member name="P:Altseed.RenderedText.Material">
            <summary>
            マテリアルを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedText.Text">
            <summary>
            テキストを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedText.Font">
            <summary>
            フォントを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedText.Weight">
            <summary>
            文字の太さを取得または設定します。(0 ~ 255)
            </summary>
        </member>
        <member name="P:Altseed.RenderedText.Color">
            <summary>
            色を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedText.Create">
            <summary>
            テキストを作成します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RenderedText"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RenderedText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RenderedText.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RenderedText.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.RenderedPolygon">
            <summary>
            ポリゴンのクラス
            </summary>
        </member>
        <member name="P:Altseed.RenderedPolygon.Vertexes">
            <summary>
            頂点情報を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedPolygon.Texture">
            <summary>
            テクスチャを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedPolygon.Src">
            <summary>
            描画範囲を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedPolygon.Material">
            <summary>
            マテリアルを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedPolygon.Create">
            <summary>
            ポリゴンを作成します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedPolygon.SetVertexesByVector2F(Altseed.Vector2FArray)">
            <summary>
            頂点情報
            </summary>
        </member>
        <member name="M:Altseed.RenderedPolygon.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RenderedPolygon"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RenderedPolygon.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RenderedPolygon.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RenderedPolygon.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.RenderedCamera">
            <summary>
            カメラのクラス
            </summary>
        </member>
        <member name="P:Altseed.RenderedCamera.CenterOffset">
            <summary>
            CenterOffsetを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RenderedCamera.TargetTexture">
            <summary>
            TargetTextureを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedCamera.Create">
            <summary>
            RenderedCameraを作成します。
            </summary>
        </member>
        <member name="M:Altseed.RenderedCamera.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RenderedCamera"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RenderedCamera.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RenderedCamera.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RenderedCamera.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.BuiltinShader">
            <summary>
            組み込みシェーダの取得を行うクラス
            </summary>
        </member>
        <member name="M:Altseed.BuiltinShader.Create(Altseed.BuiltinShaderType)">
            <summary>
            シェーダを取得します。
            </summary>
            <param name="type">シェーダの種類</param>
            <returns><paramref name="type"/>に対応した種類の組み込みの<see cref="T:Altseed.Shader"/>のインスタンス</returns>
        </member>
        <member name="T:Altseed.Shader">
            <summary>
            シェーダ
            </summary>
        </member>
        <member name="P:Altseed.Shader.Code">
            <summary>
            インスタンス生成に使用したコードを取得します
            </summary>
        </member>
        <member name="P:Altseed.Shader.Name">
            <summary>
            名前を取得します
            </summary>
        </member>
        <member name="M:Altseed.Shader.Create(System.String,System.String,Altseed.ShaderStageType)">
            <summary>
            コードをコンパイルしてシェーダを生成する
            </summary>
            <param name="name">シェーダの名前</param>
            <param name="code">コンパイルするコード</param>
            <param name="shaderStage"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>, <paramref name="code"/>のいずれかがnull</exception>
            <returns>コンパイルの結果生成されたシェーダ</returns>
        </member>
        <member name="M:Altseed.Shader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Shader"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Shader.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Shader.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Shader.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Shader.Shader_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,Altseed.ShaderStageType@,System.String@,System.String@)">
            <summary>
            <see cref="M:Altseed.Shader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="StageType"><see cref="P:Altseed.Shader.StageType"/></param>
            <param name="Code"><see cref="P:Altseed.Shader.Code"/></param>
            <param name="Name"><see cref="P:Altseed.Shader.Name"/></param>
        </member>
        <member name="T:Altseed.Glyph">
            <summary>
            文字情報
            </summary>
        </member>
        <member name="P:Altseed.Glyph.TextureSize">
            <summary>
            文字テクスチャのサイズを取得する
            </summary>
        </member>
        <member name="P:Altseed.Glyph.TextureIndex">
            <summary>
            文字テクスチャのインデックスを取得する
            </summary>
        </member>
        <member name="P:Altseed.Glyph.Position">
            <summary>
            文字の座標を取得する
            </summary>
        </member>
        <member name="P:Altseed.Glyph.Size">
            <summary>
            文字のサイズを取得する
            </summary>
        </member>
        <member name="P:Altseed.Glyph.Offset">
            <summary>
            文字のオフセットを取得する
            </summary>
        </member>
        <member name="P:Altseed.Glyph.GlyphWidth">
            <summary>
            文字の幅を取得する
            </summary>
        </member>
        <member name="T:Altseed.Font">
            <summary>
            フォント
            </summary>
        </member>
        <member name="P:Altseed.Font.Size">
            <summary>
            フォントのサイズを取得する
            </summary>
        </member>
        <member name="P:Altseed.Font.Ascent">
            <summary>
            フォントのベースラインからトップラインまでの距離を取得する
            </summary>
        </member>
        <member name="P:Altseed.Font.Descent">
            <summary>
            フォントのベースラインからボトムラインまでの距離を取得する
            </summary>
        </member>
        <member name="P:Altseed.Font.LineGap">
            <summary>
            フォントの行間の距離を取得する
            </summary>
        </member>
        <member name="P:Altseed.Font.IsStaticFont">
            <summary>
            StaticFontか否か
            </summary>
        </member>
        <member name="P:Altseed.Font.Path">
            <summary>
            読み込んだファイルのパスを取得します。
            </summary>
        </member>
        <member name="M:Altseed.Font.LoadDynamicFont(System.String,System.Int32)">
            <summary>
            動的にフォントを生成します
            </summary>
            <param name="path">読み込むフォントのパス</param>
            <param name="size">フォントのサイズ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns><paramref name="path"/>の指定するファイルから生成されたフォント</returns>
        </member>
        <member name="M:Altseed.Font.LoadStaticFont(System.String)">
            <summary>
            静的にフォントを生成します
            </summary>
            <param name="path">読み込むフォントのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns><paramref name="path"/>の指定するファイルから生成されたフォント</returns>
        </member>
        <member name="M:Altseed.Font.GenerateFontFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            a2fフォントを生成します
            </summary>
            <param name="dynamicFontPath">読み込むtruetypeフォントのパス</param>
            <param name="staticFontPath">生成するa2fフォントのパス</param>
            <param name="size">フォントのサイズ</param>
            <param name="characters">フォント化させる文字列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dynamicFontPath"/>, <paramref name="staticFontPath"/>のいずれかがnull</exception>
            <returns>生成できたか否か</returns>
        </member>
        <member name="M:Altseed.Font.GetGlyph(System.Int32)">
            <summary>
            文字情報を取得する
            </summary>
            <param name="character">文字</param>
            <returns>文字</returns>
        </member>
        <member name="M:Altseed.Font.GetFontTexture(System.Int32)">
            <summary>
            文字列テクスチャを得る
            </summary>
            <param name="index">インデックス</param>
            <returns>テクスチャ</returns>
        </member>
        <member name="M:Altseed.Font.GetKerning(System.Int32,System.Int32)">
            <summary>
            カーニングを得る
            </summary>
            <param name="c1">文字1</param>
            <param name="c2">文字2</param>
            <returns>カーニング</returns>
        </member>
        <member name="M:Altseed.Font.CalcTextureSize(System.String,Altseed.WritingDirection,System.Boolean)">
            <summary>
            テキストを描画したときのサイズを取得します
            </summary>
            <param name="text">テキスト</param>
            <param name="direction">文字列の方向</param>
            <param name="isEnableKerning">カーニングの有無</param>
            <returns>サイズ</returns>
        </member>
        <member name="M:Altseed.Font.CreateImageFont(Altseed.Font)">
            <summary>
            テクスチャ追加対応フォントを生成します
            </summary>
            <param name="baseFont">ベースとなるフォント</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseFont"/>がnull</exception>
            <returns>テクスチャ追加対応フォント</returns>
        </member>
        <member name="M:Altseed.Font.AddImageGlyph(System.Int32,Altseed.Texture2D)">
            <summary>
            テクスチャ文字を追加する
            </summary>
            <param name="character">文字</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:Altseed.Font.GetImageGlyph(System.Int32)">
            <summary>
            テクスチャ文字を取得する
            </summary>
            <param name="character">文字</param>
            <returns>テクスチャ文字</returns>
        </member>
        <member name="M:Altseed.Font.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Font"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Font.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Font.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Font.Font_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@,System.Boolean@)">
            <summary>
            <see cref="!:OnDeserialization(object)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Size"><see cref="P:Altseed.Font.Size"/></param>
            <param name="IsStaticFont"><see cref="P:Altseed.Font.IsStaticFont"/></param>
        </member>
        <member name="M:Altseed.Font.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="M:Altseed.Font.LoadDynamicFontStrict(System.String,System.Int32)">
            <summary>
            動的にフォントを読み込む
            </summary>
            <param name="path">フォントファイルのパス</param>
            <param name="size">フォントサイズ</param>
            <returns>動的に生成されるフォント</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる又は使用できない文字を含む</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>が0以下</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定したファイルが見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.SystemException">ファイルが破損していたまたは読み込みに失敗した</exception>
        </member>
        <member name="M:Altseed.Font.LoadStaticFontStrict(System.String)">
            <summary>
            静的にフォントを読み込む
            </summary>
            <param name="path">フォントファイルのパス</param>
            <returns>静的に生成されるフォント</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる又は使用できない文字を含む</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定したファイルが見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.SystemException">ファイルが破損していたまたは読み込みに失敗した</exception>
        </member>
        <member name="M:Altseed.Font.AddImageGlyph(System.Char,Altseed.Texture2D)">
            <summary>
            テクスチャ文字を追加する
            </summary>
            <param name="character">文字</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:Altseed.Tool.Begin(System.String,Altseed.ToolWindow)">
            <summary>
            `End()` を呼び出してください。
            </summary>
        </member>
        <member name="M:Altseed.Tool.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.NewFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Render">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Dummy(Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TextUnformatted(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TextWrapped(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TextColored(Altseed.Vector4F,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TextDisabled(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BulletText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.LabelText(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.CollapsingHeader(System.String,Altseed.ToolTreeNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TreeNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TreeNodeEx(System.String,Altseed.ToolTreeNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.TreePop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetNextItemOpen(System.Boolean,Altseed.ToolCond)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Button(System.String,Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.CheckBox(System.String,System.Boolean@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.RadioButton(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.ArrowButton(System.String,Altseed.ToolDir)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.InvisibleButton(System.String,Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Selectable(System.String,System.Boolean@,Altseed.ToolSelectable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.InputInt(System.String,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.InputFloat(System.String,System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SliderInt(System.String,System.Int32@,System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SliderFloat(System.String,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SliderAngle(System.String,System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.VSliderInt(System.String,Altseed.Vector2F,System.Int32@,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.VSliderFloat(System.String,Altseed.Vector2F,System.Single@,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.DragInt(System.String,System.Int32@,System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.DragFloat(System.String,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.OpenPopup(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginPopup(System.String)">
            <summary>
            `EndPopup()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginPopupModal(System.String)">
            <summary>
            `EndPopup()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndPopup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginChild(System.String,Altseed.Vector2F,System.Boolean,Altseed.ToolWindow)">
            <summary>
            `EndChild()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndChild">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginMenuBar">
            <summary>
            `EndMenuBar()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndMenuBar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginMenu(System.String,System.Boolean)">
            <summary>
            `EndMenu()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndMenu">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.MenuItem(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginTabBar(System.String,Altseed.ToolTabBar)">
            <summary>
            `EndTabBar()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndTabBar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginTabItem(System.String)">
            <summary>
            `EndTabItem()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndTabItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Indent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Unindent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Separator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetTooltip(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.BeginTooltip">
            <summary>
            `EndTooltip()` を呼び出してください
            </summary>
        </member>
        <member name="M:Altseed.Tool.EndTooltip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.NewLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SameLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PushTextWrapPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PopTextWrapPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetNextItemWidth(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PushItemWidth(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PopItemWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PushButtonRepeat(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PopButtonRepeat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.Columns(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.NextColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PushID(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.PopID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.IsItemActive">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.IsItemHovered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetScrollHere">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetScrollHereX">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetScrollHereY">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.GetTextLineHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.GetFontSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.GetWindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetWindowSize(Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.IsMousePosValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.IsMouseDragging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.IsMouseDoubleClicked(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.GetMouseDragDelta(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.ResetMouseDragDelta(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetNextWindowContentSize(Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetNextWindowSize(Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altseed.Tool.SetNextWindowPos(Altseed.Vector2F)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Altseed.StreamFile">
            <summary>
            段階的にファイルを読み取るクラス
            </summary>
        </member>
        <member name="P:Altseed.StreamFile.Size">
            <summary>
            読み込むファイルのデータサイズを取得します。
            </summary>
        </member>
        <member name="P:Altseed.StreamFile.CurrentPosition">
            <summary>
            現在読み込んでいるファイル上の位置を取得します。
            </summary>
        </member>
        <member name="P:Altseed.StreamFile.TempBufferSize">
            <summary>
            現在読み込んでいるファイルのデータサイズを取得します。
            </summary>
        </member>
        <member name="P:Altseed.StreamFile.IsInPackage">
            <summary>
            読み込むファイルがファイルパッケージ内に格納されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:Altseed.StreamFile.Path">
            <summary>
            読み込んだファイルのパスを取得します。
            </summary>
        </member>
        <member name="M:Altseed.StreamFile.Create(System.String)">
            <summary>
            指定ファイルを読み込む<see cref="T:Altseed.StreamFile"/>の新しいインスタンスを生成します。
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>pathで読み込むファイルを格納する<see cref="T:Altseed.StreamFile"/>の新しいインスタンスを生成します。</returns>
        </member>
        <member name="M:Altseed.StreamFile.Read(System.Int32)">
            <summary>
            指定した分ファイルを読み込む
            </summary>
            <param name="size">この処理で読み込むデータサイズ</param>
            <returns>読み込まれたデータサイズ</returns>
        </member>
        <member name="M:Altseed.StreamFile.GetTempBuffer">
            <summary>
            現在読み込んでいるファイルのデータを取得します。
            </summary>
            <returns>現在読み込んでいるファイルのデータ</returns>
        </member>
        <member name="M:Altseed.StreamFile.Reload">
            <summary>
            再読み込みを行います。
            </summary>
            <returns>再読み込み処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.StreamFile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.StreamFile"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.StreamFile.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.StreamFile.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.StreamFile.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.StreamFile.StreamFile_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.Int32@)">
            <summary>
            <see cref="!:OnDeserialization(object)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="CurrentPosition"><see cref="P:Altseed.StreamFile.CurrentPosition"/></param>
        </member>
        <member name="M:Altseed.StreamFile.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="P:Altseed.StreamFile.TempBuffer">
            <summary>
            現在読み込まれているデータを取得する
            </summary>
        </member>
        <member name="M:Altseed.StreamFile.CreateStrict(System.String)">
            <summary>
            指定パスからファイルを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる、または使用出来ない文字を含んでいる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定するパスが見つからない</exception>
            <exception cref="T:System.SystemException">ファイルが破損または読み込みに失敗</exception>
            <returns><paramref name="path"/>をパスに持つファイルのデータを格納した<see cref="T:Altseed.StreamFile"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.StreamFile.Save(System.String)">
            <summary>
            指定したパスに保存する
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる又は使用できない文字を使用している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定したディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oに失敗した</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
        </member>
        <member name="T:Altseed.StaticFile">
            <summary>
            一度でファイルを読み取るクラス
            </summary>
        </member>
        <member name="P:Altseed.StaticFile.Path">
            <summary>
            読み込んだファイルのパスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.StaticFile.Size">
            <summary>
            読み込んだファイルのデータサイズを取得します。
            </summary>
        </member>
        <member name="P:Altseed.StaticFile.IsInPackage">
            <summary>
            読み込んだファイルがファイルパッケージ内に格納されているかどうかを取得します。
            </summary>
        </member>
        <member name="M:Altseed.StaticFile.Create(System.String)">
            <summary>
            指定ファイルを読み込んだ<see cref="T:Altseed.StaticFile"/>の新しいインスタンスを生成します。
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>pathで読み込んだファイルを格納する<see cref="T:Altseed.StaticFile"/>の新しいインスタンスを生成します。</returns>
        </member>
        <member name="M:Altseed.StaticFile.GetBuffer">
            <summary>
            読み込んだファイルのデータを取得します。
            </summary>
            <returns>読み込んだファイルのデータ</returns>
        </member>
        <member name="M:Altseed.StaticFile.Reload">
            <summary>
            再読み込みを行います。
            </summary>
            <returns>再読み込み処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.StaticFile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.StaticFile"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.StaticFile.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.StaticFile.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.StaticFile.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="P:Altseed.StaticFile.Buffer">
            <summary>
            読み込まれたデータを取得する
            </summary>
        </member>
        <member name="M:Altseed.StaticFile.CreateStrict(System.String)">
            <summary>
            指定パスからファイルを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる、または使用出来ない文字を含んでいる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定するパスが見つからない</exception>
            <exception cref="T:System.SystemException">ファイルが破損または読み込みに失敗</exception>
            <returns><paramref name="path"/>をパスに持つファイルのデータを格納した<see cref="T:Altseed.StaticFile"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.StaticFile.Save(System.String)">
            <summary>
            指定したパスに保存する
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる又は使用できない文字を使用している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定したディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oに失敗した</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
        </member>
        <member name="M:Altseed.StaticFile.CreateAsync(System.String)">
            <summary>
            非同期読み込みを行う
            </summary>
            <param name="path">読み込むパス</param>
            <returns></returns>
        </member>
        <member name="T:Altseed.File">
            <summary>
            ファイル制御を行うクラス
            </summary>
        </member>
        <member name="M:Altseed.File.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="M:Altseed.File.AddRootDirectory(System.String)">
            <summary>
            ファイル読み込み時に自動的に保管されるディレクトリを追加します。
            </summary>
            <param name="path">追加するディレクトリ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>追加処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.File.AddRootPackageWithPassword(System.String,System.String)">
            <summary>
            ファイルパッケージをパスワード有りで読み込む
            </summary>
            <param name="path">読み込むファイルパッケージのパス</param>
            <param name="password">読み込むファイルパッケージのパスワード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>, <paramref name="password"/>のいずれかがnull</exception>
            <returns>読み込み処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.File.AddRootPackage(System.String)">
            <summary>
            ファイルパッケージをパスワード無しで読み込む
            </summary>
            <param name="path">読み込むファイルパッケージのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>読み込み処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.File.ClearRootDirectories">
            <summary>
            追加されたディレクトリやファイルパッケージをすべて削除します。
            </summary>
        </member>
        <member name="M:Altseed.File.Exists(System.String)">
            <summary>
            指定したファイルが存在するかどうかを検索します。
            </summary>
            <param name="path">存在を確認するファイルのパス</param>
            <returns>pathの示すファイルが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.File.Pack(System.String,System.String)">
            <summary>
            指定したディレクトリのファイルをパックする
            </summary>
            <param name="srcPath">パックするファイルのディレクトリ</param>
            <param name="dstPath">パックされたファイル名</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="srcPath"/>, <paramref name="dstPath"/>のいずれかがnull</exception>
            <returns>パック処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.File.PackWithPassword(System.String,System.String,System.String)">
            <summary>
            指定したディレクトリのファイルをパスワード付きでパックする
            </summary>
            <param name="srcPath">パックするファイルのディレクトリ</param>
            <param name="dstPath">パックされたファイル名</param>
            <param name="password">かけるパスワード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="srcPath"/>, <paramref name="dstPath"/>, <paramref name="password"/>のいずれかがnull</exception>
            <returns>パック処理がうまくいったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:Altseed.Sound">
            <summary>
            音源のクラス
            </summary>
        </member>
        <member name="P:Altseed.Sound.LoopStartingPoint">
            <summary>
            ループ開始地点(秒)を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Sound.LoopEndPoint">
            <summary>
            ループ終了地点(秒)を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Sound.IsLoopingMode">
            <summary>
            ループするかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Sound.Length">
            <summary>
            音源の長さ(秒)を取得します。
            </summary>
        </member>
        <member name="P:Altseed.Sound.Path">
            <summary>
            読み込んだファイルのパスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Sound.IsDecompressed">
            <summary>
            音源を解凍するかどうかを取得する
            </summary>
        </member>
        <member name="M:Altseed.Sound.Load(System.String,System.Boolean)">
            <summary>
            音声ファイルを読み込みます。
            </summary>
            <param name="path">読み込む音声ファイルのパス</param>
            <param name="isDecompressed">音を再生する前にデータを全て解凍するか?</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>読み込んだ音源データ</returns>
        </member>
        <member name="M:Altseed.Sound.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Sound"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Sound.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Sound.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Sound.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="M:Altseed.Sound.Sound_Unsetter_Deserialize(System.Runtime.Serialization.SerializationInfo,System.String@,System.Boolean@)">
            <summary>
            <see cref="M:Altseed.Sound.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>でデシリアライズされなかったオブジェクトを呼び出す
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="Path"><see cref="P:Altseed.Sound.Path"/></param>
            <param name="IsDecompressed"><see cref="P:Altseed.Sound.IsDecompressed"/></param>
        </member>
        <member name="M:Altseed.Sound.LoadStrict(System.String,System.Boolean)">
            <summary>
            指定パスから音源を読み込む
            </summary>
            <param name="path">読み込む音源のパス</param>
            <param name="isDecompressed">一気に解凍するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる、または使用出来ない文字を含んでいる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定された音源が見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定するパスが見つからない</exception>
            <exception cref="T:System.SystemException">音源が破損または読み込みに失敗</exception>
            <returns><paramref name="path"/>をパスに持つ音源のデータを格納した<see cref="T:Altseed.Sound"/>の新しいインスタンス</returns>
        </member>
        <member name="T:Altseed.SoundMixer">
            <summary>
            音源を操作するクラス
            </summary>
        </member>
        <member name="M:Altseed.SoundMixer.Play(Altseed.Sound)">
            <summary>
            音を再生します。
            </summary>
            <param name="sound">音源データ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sound"/>がnull</exception>
            <returns>再生中の音のID</returns>
        </member>
        <member name="M:Altseed.SoundMixer.GetIsPlaying(System.Int32)">
            <summary>
            指定した音が再生中であるかを取得します。
            </summary>
            <param name="id">音のID</param>
            <returns>IDに対応する音が再生中であるか?</returns>
        </member>
        <member name="M:Altseed.SoundMixer.StopAll">
            <summary>
            再生中の音を全て停止します。
            </summary>
        </member>
        <member name="M:Altseed.SoundMixer.Stop(System.Int32)">
            <summary>
            指定した音の再生を停止します。
            </summary>
            <param name="id">音のID</param>
        </member>
        <member name="M:Altseed.SoundMixer.Pause(System.Int32)">
            <summary>
            指定した音の再生を一時停止します。
            </summary>
            <param name="id">音のID</param>
        </member>
        <member name="M:Altseed.SoundMixer.Resume(System.Int32)">
            <summary>
            指定した音の再生を再開します。
            </summary>
            <param name="id">音のID</param>
        </member>
        <member name="M:Altseed.SoundMixer.SetVolume(System.Int32,System.Single)">
            <summary>
            指定した音の音量を変更します。
            </summary>
            <param name="id">音のID</param>
            <param name="volume">音量(0.0〜1.0)</param>
        </member>
        <member name="M:Altseed.SoundMixer.FadeIn(System.Int32,System.Single)">
            <summary>
            指定した音をフェードインさせる
            </summary>
            <param name="id"></param>
            <param name="second">フェードインに使用する時間(秒)</param>
        </member>
        <member name="M:Altseed.SoundMixer.FadeOut(System.Int32,System.Single)">
            <summary>
            指定した音をフェードアウトさせる
            </summary>
            <param name="id">音のID</param>
            <param name="second">フェードアウトに使用する時間(秒)</param>
        </member>
        <member name="M:Altseed.SoundMixer.Fade(System.Int32,System.Single,System.Single)">
            <summary>
            指定した音の音量を一定時間かけて変更します。
            </summary>
            <param name="id">音のID</param>
            <param name="second">フェードに使用する時間(秒)</param>
            <param name="targetedVolume">変更後の音量(0.0〜1.0)</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetIsPlaybackSpeedEnabled(System.Int32)">
            <summary>
            再生速度を変更するかを取得します。
            </summary>
            <param name="id">音のID</param>
            <returns>再生速度を変更するか?</returns>
        </member>
        <member name="M:Altseed.SoundMixer.SetIsPlaybackSpeedEnabled(System.Int32,System.Boolean)">
            <summary>
            再生速度を変更するかを設定します。
            </summary>
            <param name="id">音のID</param>
            <param name="isPlaybackSpeedEnabled">再生速度を変更するか?</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetPlaybackSpeed(System.Int32)">
            <summary>
            再生速度を取得します。
            </summary>
            <param name="id">音のID</param>
            <returns>本来の速度の何倍で再生されているか?</returns>
        </member>
        <member name="M:Altseed.SoundMixer.SetPlaybackSpeed(System.Int32,System.Single)">
            <summary>
            再生速度を設定します。
            </summary>
            <param name="id">音のID</param>
            <param name="playbackSpeed">変更後の再生速度</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetPanningPosition(System.Int32)">
            <summary>
            パン位置を取得します。
            </summary>
            <param name="id">音のID</param>
            <returns>パン位置 : 0.0で中央, -1.0で左, 1.0で右</returns>
        </member>
        <member name="M:Altseed.SoundMixer.SetPanningPosition(System.Int32,System.Single)">
            <summary>
            パン位置を設定します。
            </summary>
            <param name="id">音のID</param>
            <param name="panningPosition">パン位置 : 0.0で中央, -1.0で左, 1.0で右</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetPlaybackPosition(System.Int32)">
            <summary>
            指定した音の再生位置を取得します。
            </summary>
            <param name="id">音のID</param>
            <returns>現在の再生位置</returns>
        </member>
        <member name="M:Altseed.SoundMixer.SetPlaybackPosition(System.Int32,System.Single)">
            <summary>
            指定した音の再生位置を変更します。
            </summary>
            <param name="id">音のID</param>
            <param name="position">再生位置(秒)</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetSpectrumData(System.Int32,Altseed.FloatArray,Altseed.FFTWindow)">
            <summary>
            再生中の音のスペクトル情報を取得します。
            </summary>
            <param name="id">音のID</param>
            <param name="spectrums">音のスペクトル情報を格納するための配列</param>
            <param name="window">フーリエ変換に用いる窓関数</param>
        </member>
        <member name="M:Altseed.SoundMixer.GetSpectrumData(System.Int32,System.Int32,Altseed.FFTWindow)">
            <summary>
            再生中の音のスペクトル情報を取得します。
            </summary>
            <param name="id">音のID</param>
            <param name="dataNum">音のスペクトル情報を格納するための配列の容量</param>
            <param name="window">フーリエ変換に用いる窓関数</param>
        </member>
        <member name="T:Altseed.Log">
            <summary>
            ログを出力するクラス
            </summary>
        </member>
        <member name="M:Altseed.Log.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Write(Altseed.LogCategory,Altseed.LogLevel,System.String)">
            <summary>
            ログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Trace(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="F:Altseed.LogLevel.Trace"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Debug(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="F:Altseed.LogLevel.Debug"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Info(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="F:Altseed.LogLevel.Info"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Warn(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="!:LogLevel.Warning"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Error(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="F:Altseed.LogLevel.Error"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.Critical(Altseed.LogCategory,System.String)">
            <summary>
            <see cref="F:Altseed.LogLevel.Critical"/>でログを出力します。
            </summary>
        </member>
        <member name="M:Altseed.Log.SetLevel(Altseed.LogCategory,Altseed.LogLevel)">
            <summary>
            ログレベルを設定します。
            </summary>
        </member>
        <member name="P:Altseed.Window.Title">
            <summary>
            ウィンドウに表示するタイトルを取得または設定します
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:Altseed.Window.Size">
            <summary>
            ウィンドウサイズを取得します
            </summary>
        </member>
        <member name="M:Altseed.Window.GetInstance">
            <summary>
            インスタンスを取得します。
            </summary>
            <returns>使用するインスタンス</returns>
        </member>
        <member name="T:Altseed.Collider">
            <summary>
            コライダの抽象基本クラスです
            </summary>
        </member>
        <member name="P:Altseed.Collider.Position">
            <summary>
            コライダの位置情報を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Collider.Rotation">
            <summary>
            コライダの回転情報を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.Collider.GetIsCollidedWith(Altseed.Collider)">
            <summary>
            指定したコライダとの衝突判定を行います。
            </summary>
        </member>
        <member name="M:Altseed.Collider.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.Collider"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.Collider.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.Collider.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.Collider.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.CircleCollider">
            <summary>
            円形コライダのクラス
            </summary>
        </member>
        <member name="P:Altseed.CircleCollider.Radius">
            <summary>
            円形コライダの半径を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.CircleCollider.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.CircleCollider"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.CircleCollider.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.CircleCollider.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.CircleCollider.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.RectangleCollider">
            <summary>
            矩形コライダのクラス
            </summary>
        </member>
        <member name="P:Altseed.RectangleCollider.Size">
            <summary>
            矩形コライダの幅・高さを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.RectangleCollider.CenterPosition">
            <summary>
            矩形コライダの中心の位置を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.RectangleCollider.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.RectangleCollider"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.RectangleCollider.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.RectangleCollider.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.RectangleCollider.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.PolygonCollider">
            <summary>
            多角形コライダのクラス
            </summary>
        </member>
        <member name="P:Altseed.PolygonCollider.Vertexes">
            <summary>
            多角形コライダの頂点の座標を取得または設定します
            </summary>
        </member>
        <member name="M:Altseed.PolygonCollider.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:Altseed.PolygonCollider"/>のインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:Altseed.PolygonCollider.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定します。
            </summary>
            <param name="info">シリアライズされるデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Altseed.PolygonCollider.Deserialize_GetPtr(System.IntPtr@,System.Runtime.Serialization.SerializationInfo)" -->
        <member name="M:Altseed.PolygonCollider.Call_GetPtr(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            呼び出し禁止
            </summary>
        </member>
        <member name="T:Altseed.Registerable`1">
            <summary>
            <see cref="T:Altseed.RegisterableCollection`2"/>に登録や削除が可能な要素であることを表します。
            </summary>
        </member>
        <member name="M:Altseed.Registerable`1.Added(`0)">
            <summary>
            要素が<paramref name="owner"/>に登録されたとき実行します。
            </summary>
        </member>
        <member name="M:Altseed.Registerable`1.Removed">
            <summary>
            要素が親要素から削除されたときに実行します。
            </summary>
        </member>
        <member name="P:Altseed.Registerable`1.Status">
            <summary>
            登録状況を取得します。
            </summary>
        </member>
        <member name="T:Altseed.RegisterableCollection`2">
            <summary>
            追加および削除を予約できるコレクションを表します。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.#ctor(`1)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.Add(`0)">
            <summary>
            要素の追加を予約します。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.Remove(`0)">
            <summary>
            要素の削除を予約します。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.Update">
            <summary>
            コレクションを更新します。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            指定した比較子を使用して、コレクションをソートします。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.Clear">
            <summary>
            子要素の登録をすべて削除します。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.AsReadOnly">
            <summary>
            現在の要素の読み取り専用なコレクションを返します。
            </summary>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.AddImmediately(`0)">
            <summary>
            直ちに要素を追加します。
            </summary>
            <remarks>列挙中に呼び出さないこと</remarks>
        </member>
        <member name="M:Altseed.RegisterableCollection`2.AddImmediately(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            直ちに要素を追加します。
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="objs"/>がnull</exception>
            <remarks>列挙中に呼び出さないこと</remarks>
        </member>
        <member name="T:Altseed.RegisterStatus">
            <summary>
            登録状況を表します。
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.Free">
            <summary>
            所属なし
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.WaitAdded">
            <summary>
            追加待ち
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.Registered">
            <summary>
            所属有り
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.WaitRemoved">
            <summary>
            削除待ち
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.WaitDisposed">
            <summary>
            破棄待ち
            </summary>
        </member>
        <member name="F:Altseed.RegisterStatus.Disposed">
            <summary>
            破棄済み
            </summary>
        </member>
        <member name="T:Altseed.IArray`1">
            <summary>
            Coreとの接続に使用する配列のインターフェイス
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
        </member>
        <member name="P:Altseed.IArray`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:Altseed.IArray`1.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <returns><paramref name="index"/>に該当する要素</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>の値が0未満または<see cref="P:Altseed.IArray`1.Count"/>以上</exception>        
        </member>
        <member name="M:Altseed.IArray`1.Resize(System.Int32)">
            <summary>
            サイズを変更する
            </summary>
            <param name="size">変更先のサイズ</param>
        </member>
        <member name="M:Altseed.IArray`1.CopyTo(System.IntPtr)">
            <summary>
            データを指定したポインターにコピーする
            </summary>
            <param name="ptr">コピー先のポインター</param>
        </member>
        <member name="T:Altseed.ArrayExtension">
            <summary>
            Coreとの接続に使用する配列の拡張メソッドの定義クラス
            </summary>
        </member>
        <member name="M:Altseed.ArrayExtension.ToArray``1(Altseed.IArray{``0})">
            <summary>
            このインスタンスと同じデータを持った<typeparamref name="TElement"/>型の配列の新しいインスタンスを生成する
            </summary>
            <typeparam name="TElement">配列に格納される要素の型</typeparam>
            <param name="obj">配列のもとになるCore接続用配列クラスのインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
            <returns><paramref name="obj"/>と同じデータを持った配列</returns>
        </member>
        <member name="M:Altseed.ArrayExtension.FromArray``1(Altseed.IArray{``0},``0[])">
            <summary>
            Core接続配列に指定した配列のデータを設定する
            </summary>
            <typeparam name="TElement">配列に格納される要素の型</typeparam>
            <param name="obj">データを設定するCore接続配列のインデスタンス</param>
            <param name="array">設定するデータとなる配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>または<paramref name="array"/>がnull</exception>
        </member>
        <member name="T:Altseed.Vertex">
            <summary>
            頂点の情報を格納する構造体
            </summary>
        </member>
        <member name="F:Altseed.Vertex.Position">
            <summary>
            座標
            </summary>
        </member>
        <member name="F:Altseed.Vertex.Color">
            <summary>
            色
            </summary>
        </member>
        <member name="F:Altseed.Vertex.UV1">
            <summary>
            UV値1
            </summary>
        </member>
        <member name="F:Altseed.Vertex.UV2">
            <summary>
            UV値2
            </summary>
        </member>
        <member name="M:Altseed.Vertex.#ctor(Altseed.Vector3F,Altseed.Color,Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="position">座標</param>
            <param name="color">色</param>
            <param name="uv1">UV1</param>
            <param name="uv2">UV2</param>
        </member>
        <member name="M:Altseed.Vertex.Equals(Altseed.Vertex)">
            <summary>
            もう一つの<see cref="T:Altseed.Vertex"/>との間の等価性を判定する
            </summary>
            <param name="other">等価線を判定する<see cref="T:Altseed.Vertex"/>のインスタンス</param>
            <returns><paramref name="other"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vertex.Equals(System.Object)">
            <summary>
            オブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vertex.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="T:Altseed.Color">
            <summary>
            色を表す構造体
            </summary>
        </member>
        <member name="F:Altseed.Color.R">
            <summary>
            R値
            </summary>
        </member>
        <member name="F:Altseed.Color.G">
            <summary>
            G値
            </summary>
        </member>
        <member name="F:Altseed.Color.B">
            <summary>
            B値
            </summary>
        </member>
        <member name="F:Altseed.Color.A">
            <summary>
            A値
            </summary>
        </member>
        <member name="M:Altseed.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="r">R値</param>
            <param name="g">G値</param>
            <param name="b">B値</param>
            <param name="a">A値</param>
        </member>
        <member name="M:Altseed.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="r">R値</param>
            <param name="g">G値</param>
            <param name="b">B値</param>
            <param name="a">A値</param>
        </member>
        <member name="M:Altseed.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="r">R値</param>
            <param name="g">G値</param>
            <param name="b">B値</param>
        </member>
        <member name="M:Altseed.Color.Equals(Altseed.Color)">
            <summary>
            もう一つの<see cref="T:Altseed.Color"/>との間の等価性を判定する
            </summary>
            <param name="other">等価線を判定する<see cref="T:Altseed.Color"/>のインスタンス</param>
            <returns><paramref name="other"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Color.Equals(System.Object)">
            <summary>
            オブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Color.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Color.ToString">
            <summary>
            このインスタンスを表す文字列を取得する
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="M:Altseed.RenderPassParameter.#ctor(Altseed.Color,Altseed.RenderTargetCareType,Altseed.RenderTargetCareType)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="clearColor"></param>
            <param name="colorCare"></param>
            <param name="depthCare"></param>
        </member>
        <member name="M:Altseed.RenderPassParameter.Equals(Altseed.RenderPassParameter)">
            <summary>
            もう一つの<see cref="T:Altseed.RenderPassParameter"/>との間の等価性を判定する
            </summary>
            <param name="other">等価線を判定する<see cref="T:Altseed.RenderPassParameter"/>のインスタンス</param>
            <returns><paramref name="other"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RenderPassParameter.Equals(System.Object)">
            <summary>
            オブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RenderPassParameter.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="T:Altseed.Engine">
            <summary>
            Altseed2 のエンジンを表します。
            </summary>
        </member>
        <member name="F:Altseed.Engine._RootNode">
            <summary>
            ルートノード
            </summary>
        </member>
        <member name="F:Altseed.Engine._UpdatedNode">
            <summary>
            実際のUpdate対象のノード
            </summary>
            <remarks>Pause中は一部のノードのみが更新対象になる。</remarks>
        </member>
        <member name="M:Altseed.Engine.Initialize(System.String,System.Int32,System.Int32,Altseed.Configuration)">
            <summary>
            エンジンを初期化します。
            </summary>
            <param name="title">ウィンドウタイトル</param>
            <param name="width">ウィンドウの横幅</param>
            <param name="height">ウィンドウの縦幅</param>
            <param name="config">設定</param>
            <returns>初期化に成功したらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Engine.DoEvents">
            <summary>
            システムイベントを処理します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.Update">
            <summary>
            エンジンを更新します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.Terminate">
            <summary>
            エンジンを終了します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.Pause(Altseed.Node)">
            <summary>
            ノードの更新を一時停止します。
            </summary>
            <param name="keepUpdated">一時停止の対象から除外するノード</param>
        </member>
        <member name="M:Altseed.Engine.Resume">
            <summary>
            ノードの更新を再開します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.File">
            <summary>
            ファイルを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Keyboard">
            <summary>
            キーボードを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Mouse">
            <summary>
            マウスを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Joystick">
            <summary>
            ジョイスティックを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Graphics">
            <summary>
            グラフィックのクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Log">
            <summary>
            ログを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Renderer">
            <summary>
            レンダラのクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Sound">
            <summary>
            音を管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Resources">
            <summary>
            リソースを管理するクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Window">
            <summary>
            ウインドウを表すクラスを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Tool">
            <summary>
            ツールを管理するクラスを取得します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.GetNodes">
            <summary>
            エンジンに登録されているノードの列挙子を返します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.AddNode(Altseed.Node)">
            <summary>
            エンジンにノードを追加します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.RemoveNode(Altseed.Node)">
            <summary>
            エンジンからノードを削除します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.FindNodes``1">
            <summary>
            エンジンに登録されている <typeparamref name="T"/> 型のノードを列挙します。
            </summary>
        </member>
        <member name="M:Altseed.Engine.FindNodes``1(System.Func{``0,System.Boolean})">
            <summary>
            エンジンに登録されている <typeparamref name="T"/> 型のノードのうち <paramref name="condition"/> を満たすものを列挙します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.Context">
            <summary>
            <see cref="T:System.Threading.SynchronizationContext"/>を取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.WindowSize">
            <summary>
            ウィンドウのサイズを取得する
            </summary>
        </member>
        <member name="P:Altseed.Engine.WindowTitle">
            <summary>
            ウインドウのタイトルを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.FramerateMode">
            <summary>
            フレームレートの制御方法を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.TargetFPS">
            <summary>
            目標フレームレートを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.CurrentFPS">
            <summary>
            現在のFPSを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Engine.DeltaSecond">
            <summary>
            前のフレームからの経過時間(秒)を取得します。
            </summary>
        </member>
        <member name="T:Altseed.ICacheKeeper`1">
            <summary>
            キャッシュを使用するクラス
            </summary>
            <typeparam name="TClass">クラスの型</typeparam>
        </member>
        <member name="P:Altseed.ICacheKeeper`1.CacheRepo">
            <summary>
            キャッシュをためておくディクショナリを取得する
            </summary>
        </member>
        <member name="P:Altseed.ICacheKeeper`1.Self">
            <summary>
            自身のポインタを取得または設定する
            </summary>
        </member>
        <member name="M:Altseed.ICacheKeeper`1.Release(System.IntPtr)">
            <summary>
            キャッシュを開放する
            </summary>
            <param name="native">開放するオブジェクトのポインタ</param>
        </member>
        <member name="T:Altseed.CacheHelper">
            <summary>
            キャッシュの制御を行うクラス
            </summary>
        </member>
        <member name="M:Altseed.CacheHelper.CacheHandling``1(``0,System.IntPtr)">
            <summary>
            キャッシュ制御を行う
            </summary>
            <typeparam name="TClass">キャッシュ制御を行うクラス</typeparam>
            <param name="obj">キャッシュ制御を行うクラスのインスタンス</param>
            <param name="native"><paramref name="obj"/>に登録するポインタ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>または<paramref name="native"/>がnull</exception>
        </member>
        <member name="M:Altseed.CacheHelper.CacheHandlingConcurrent``1(``0,System.IntPtr)">
            <summary>
            キャッシュ制御をスレッドセーフに行う
            </summary>
            <typeparam name="TClass">キャッシュ制御を行うクラス</typeparam>
            <param name="obj">キャッシュ制御を行うクラスのインスタンス</param>
            <param name="native"><paramref name="obj"/>に登録するポインタ</param>
            <exception cref="T:System.ArgumentException">スレッドセーフなキャッシュ保存ディクショナリを取得できなかった</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>または<paramref name="native"/>がnull</exception>
        </member>
        <member name="M:Altseed.IOHelper.CheckLoadPath(System.String)">
            <summary>
            <see cref="T:System.ArgumentException"/>
            <see cref="T:System.ArgumentNullException"/>
            <see cref="T:System.IO.PathTooLongException"/>
            <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="M:Altseed.IOHelper.CheckSavePath(System.String)">
            <summary>
            <see cref="T:System.ArgumentException"/>
            <see cref="T:System.ArgumentNullException"/>
            <see cref="T:System.IO.PathTooLongException"/>
            <see cref="T:System.IO.DirectoryNotFoundException"/>
            </summary>
        </member>
        <member name="T:Altseed.EasingType">
            <summary>
            イージングの種類を表します。
            </summary>
        </member>
        <member name="M:Altseed.Easing.GetEasing(Altseed.EasingType,System.Single)">
            <param name="easing">イージングの種類</param>
            <param name="t">イージング過程の変数</param>
            <returns></returns>
        </member>
        <member name="T:Altseed.MathHelper">
            <summary>
            数学の演算を補助するクラス
            </summary>
        </member>
        <member name="F:Altseed.MathHelper.MatrixError">
            <summary>
            行列で使用
            誤差
            </summary>
        </member>
        <member name="M:Altseed.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            指定した値を決められた範囲に丸める
            </summary>
            <param name="v">丸める値</param>
            <param name="max">最大値</param>
            <param name="min">最小値</param>
            <returns><paramref name="v"/>が<paramref name="max"/>以上であったり<paramref name="min"/>未満であった場合はその値が，それ以外では<paramref name="v"/>そのまま返される</returns>
        </member>
        <member name="M:Altseed.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            指定した値を決められた範囲に丸める
            </summary>
            <param name="v">丸める値</param>
            <param name="max">最大値</param>
            <param name="min">最小値</param>
            <returns><paramref name="v"/>が<paramref name="max"/>以上であったり<paramref name="min"/>未満であった場合はその値が，それ以外では<paramref name="v"/>そのまま返される</returns>
        </member>
        <member name="M:Altseed.MathHelper.Clamp``1(``0,``0,``0)">
            <summary>
            指定した値を決められた範囲に丸める
            </summary>
            <param name="v">丸める値</param>
            <param name="max">最大値</param>
            <param name="min">最小値</param>
            <returns><paramref name="v"/>が<paramref name="max"/>以上であったり<paramref name="min"/>未満であった場合はその値が，それ以外では<paramref name="v"/>そのまま返される</returns>
        </member>
        <member name="M:Altseed.MathHelper.DegreeToRadian(System.Single)">
            <summary>
            度数法の値を弧度法の値に変換する
            </summary>
            <param name="degree">変換したい度数法の値</param>
            <returns>弧度法としての<paramref name="degree"/>の値</returns>
        </member>
        <member name="M:Altseed.MathHelper.RadianToDegree(System.Single)">
            <summary>
            弧度法の値を度数法の値に変換する
            </summary>
            <param name="radian">変換したい弧度法の値</param>
            <returns>度数法としての<paramref name="radian"/>の値</returns>
        </member>
        <member name="M:Altseed.MathHelper.CalcTransform(Altseed.Vector2F,Altseed.Vector2F,System.Single,Altseed.Vector2F)">
            <summary>
            Transformを計算します。
            </summary>
            <param name="position">座標</param>
            <param name="centerPosition">中心座標</param>
            <param name="angle">角度（弧度法）</param>
            <param name="scale">拡大率</param>
            <returns></returns>
        </member>
        <member name="T:Altseed.Matrix33F">
            <summary>
            <see cref="T:System.Single"/>型の3x3行列を表す構造体
            </summary>
        </member>
        <member name="P:Altseed.Matrix33F.Identity">
            <summary>
            単位行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix33F.Inversion">
            <summary>
            逆行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix33F.TransPosition">
            <summary>
            転置行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix33F.Item(System.Int32,System.Int32)">
            <summary>
            指定した位置の値を取得または設定する
            </summary>
            <param name="x">取得する要素の位置</param>
            <param name="y">取得する要素の位置</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または3以上</exception>
            <returns><paramref name="x"/>と<paramref name="y"/>に対応する値</returns>
        </member>
        <member name="M:Altseed.Matrix33F.GetRotation(System.Single)">
            <summary>
            指定した角度分の回転を表す行列を取得する
            </summary>
            <param name="radian">回転させる角度(弧度法)</param>
            <returns><paramref name="radian"/>の回転分を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix33F.GetScale(Altseed.Vector2F)">
            <summary>
            2D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale">設定する拡大率</param>
            <returns><paramref name="scale"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix33F.GetTranslation(Altseed.Vector2F)">
            <summary>
            2D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position">平行移動する座標</param>
            <returns><paramref name="position"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix33F.Transform2D(Altseed.Vector2F)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix33F.Transform3D(Altseed.Vector3F)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix33F.Equals(Altseed.Matrix33F)">
            <summary>
            2つの<see cref="T:Altseed.Matrix33F"/>間の等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:Altseed.Matrix33F"/>のインスタンス</param>
            <returns><paramref name="other"/>との間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix33F.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間の等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix33F.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返す
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Matrix33F.Clone">
            <summary>
            このインスタンスの複製を作成する
            </summary>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="T:Altseed.Matrix33I">
            <summary>
            <see cref="T:System.Int32"/>型の3x3行列を表す構造体
            </summary>
        </member>
        <member name="P:Altseed.Matrix33I.Identity">
            <summary>
            単位行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix33I.TransPosition">
            <summary>
            転置行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix33I.Item(System.Int32,System.Int32)">
            <summary>
            指定した位置の値を取得または設定する
            </summary>
            <param name="x">取得する要素の位置</param>
            <param name="y">取得する要素の位置</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または3以上</exception>
            <returns><paramref name="x"/>と<paramref name="y"/>に対応する値</returns>
        </member>
        <member name="M:Altseed.Matrix33I.GetScale(Altseed.Vector2I)">
            <summary>
            2D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale">設定する拡大率</param>
            <returns><paramref name="scale"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix33I.GetTranslation(Altseed.Vector2I)">
            <summary>
            2D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position">平行移動する座標</param>
            <returns><paramref name="position"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix33I.Transform2D(Altseed.Vector2I)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix33I.Transform3D(Altseed.Vector3I)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix33I.Equals(Altseed.Matrix33I)">
            <summary>
            2つの<see cref="T:Altseed.Matrix33I"/>間の等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:Altseed.Matrix33I"/>のインスタンス</param>
            <returns><paramref name="other"/>との間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix33I.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間の等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix33I.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返す
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Matrix33I.Clone">
            <summary>
            このインスタンスの複製を作成する
            </summary>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="T:Altseed.Matrix44F">
            <summary>
            <see cref="T:System.Single"/>型の4x4行列を表す構造体
            </summary>
        </member>
        <member name="P:Altseed.Matrix44F.Identity">
            <summary>
            単位行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix44F.Inverse">
            <summary>
            逆行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix44F.Transposed">
            <summary>
            転置行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix44F.Item(System.Int32,System.Int32)">
            <summary>
            指定した位置の値を取得または設定する
            </summary>
            <param name="x">取得する要素の位置</param>
            <param name="y">取得する要素の位置</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または4以上</exception>
            <returns><paramref name="x"/>と<paramref name="y"/>に対応する値</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetLookAtRH(Altseed.Vector3F,Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            カメラ行列(右手系)を取得する
            </summary>
            <param name="eye">カメラの位置</param>
            <param name="at">カメラの注視点</param>
            <param name="up">カメラの上方向</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetLookAtLH(Altseed.Vector3F,Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            カメラ行列(左手系)を取得する
            </summary>
            <param name="eye">カメラの位置</param>
            <param name="at">カメラの注視点</param>
            <param name="up">カメラの上方向</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetOrthographicLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            正射影行列(左手系)を取得する
            </summary>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
            <param name="zn">最近距離</param>
            <param name="zf">最遠距離</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetOrthographicRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            正射影行列(右手系)を取得する
            </summary>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
            <param name="zn">最近距離</param>
            <param name="zf">最遠距離</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetPerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            射影行列(左手系)を取得する
            </summary>
            <param name="ovY">Y方向への視野角(度数法)</param>
            <param name="aspect">画面のアスペクト比</param>
            <param name="zn">最近距離</param>
            <param name="zf">最遠距離</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetPerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            射影行列(右手系)を取得する
            </summary>
            <param name="ovY">Y方向への視野角(弧度法)</param>
            <param name="aspect">画面のアスペクト比</param>
            <param name="zn">最近距離</param>
            <param name="zf">最遠距離</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetPerspectiveFovRH_OpenGL(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            OpenGL用射影行列(右手系)を取得する
            </summary>
            <param name="ovY">Y方向への視野角(弧度法)</param>
            <param name="aspect">画面のアスペクト比</param>
            <param name="zn">最近距離</param>
            <param name="zf">最遠距離</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetQuaternion(Altseed.Vector4F)">
            <summary>
            クオータニオンを元に回転行列(右手)を取得する
            </summary>
            <param name="quaternion">使用するクオータニオン</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetRotationAxis(Altseed.Vector3F,System.Single)">
            <summary>
            任意軸の反時計回転行列(右手)を取得する
            </summary>
            <param name="axis">軸</param>
            <param name="radian">回転量(弧度法)</param>
        </member>
        <member name="M:Altseed.Matrix44F.GetRotationX(System.Single)">
            <summary>
            指定した角度分のX軸回転(右手)を表す行列を取得する
            </summary>
            <param name="radian">X軸回転させる角度(弧度法)</param>
            <returns><paramref name="radian"/>のX軸回転分を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetRotationY(System.Single)">
            <summary>
            指定した角度分のY軸回転(右手)を表す行列を取得する
            </summary>
            <param name="radian">Y軸回転させる角度(弧度法)</param>
            <returns><paramref name="radian"/>のY軸回転分を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetRotationZ(System.Single)">
            <summary>
            指定した角度分のZ軸回転(右手)を表す行列を取得する
            </summary>
            <param name="radian">Z軸回転させる角度(弧度法)</param>
            <returns><paramref name="radian"/>のZ軸回転分を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetScale2D(Altseed.Vector2F)">
            <summary>
            2D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale2D">設定する拡大率</param>
            <returns><paramref name="scale2D"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetScale3D(Altseed.Vector3F)">
            <summary>
            3D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale3D">設定する拡大率</param>
            <returns><paramref name="scale3D"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetTranslation2D(Altseed.Vector2F)">
            <summary>
            2D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position2D">平行移動する座標</param>
            <returns><paramref name="position2D"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetTranslation3D(Altseed.Vector3F)">
            <summary>
            3D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position3D">平行移動する座標</param>
            <returns><paramref name="position3D"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44F.Transform3D(Altseed.Vector3F)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="vector">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix44F.Transform4D(Altseed.Vector4F)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="vector">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix44F.Equals(Altseed.Matrix44F)">
            <summary>
            2つの<see cref="T:Altseed.Matrix44F"/>間の等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:Altseed.Matrix44F"/>のインスタンス</param>
            <returns><paramref name="other"/>との間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix44F.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間の等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix44F.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返す
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Matrix44F.Clone">
            <summary>
            このインスタンスの複製を作成する
            </summary>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="T:Altseed.Matrix44I">
            <summary>
            <see cref="T:System.Int32"/>型の4x4行列を表す構造体
            </summary>
        </member>
        <member name="P:Altseed.Matrix44I.Identity">
            <summary>
            単位行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix44I.TransPosition">
            <summary>
            転置行列を取得する
            </summary>
        </member>
        <member name="P:Altseed.Matrix44I.Item(System.Int32,System.Int32)">
            <summary>
            指定した位置の値を取得または設定する
            </summary>
            <param name="x">取得する要素の位置</param>
            <param name="y">取得する要素の位置</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または4以上</exception>
            <returns><paramref name="x"/>と<paramref name="y"/>に対応する値</returns>
        </member>
        <member name="M:Altseed.Matrix44I.GetQuaternion(Altseed.Vector4I)">
            <summary>
            クオータニオンを元に回転行列(右手)を取得する
            </summary>
            <param name="quaternion">使用するクオータニオン</param>
        </member>
        <member name="M:Altseed.Matrix44I.GetScale2D(Altseed.Vector2I)">
            <summary>
            2D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale2D">設定する拡大率</param>
            <returns><paramref name="scale2D"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44I.GetScale3D(Altseed.Vector3I)">
            <summary>
            3D座標の拡大率を表す行列を取得する
            </summary>
            <param name="scale3D">設定する拡大率</param>
            <returns><paramref name="scale3D"/>分の拡大/縮小を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44I.GetTranslation2D(Altseed.Vector2I)">
            <summary>
            2D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position2D">平行移動する座標</param>
            <returns><paramref name="position2D"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44I.GetTranslation3D(Altseed.Vector3I)">
            <summary>
            3D座標の平行移動分を表す行列を取得する
            </summary>
            <param name="position3D">平行移動する座標</param>
            <returns><paramref name="position3D"/>分の平行移動を表す行列</returns>
        </member>
        <member name="M:Altseed.Matrix44I.Transform3D(Altseed.Vector3I)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix44I.Transform4D(Altseed.Vector4I)">
            <summary>
            行列でベクトルを変形させる。
            </summary>
            <param name="in_">変形前ベクトル</param>
            <returns>変形後ベクトル</returns>
        </member>
        <member name="M:Altseed.Matrix44I.Equals(Altseed.Matrix44I)">
            <summary>
            2つの<see cref="T:Altseed.Matrix44I"/>間の等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:Altseed.Matrix44I"/>のインスタンス</param>
            <returns><paramref name="other"/>との間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix44I.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間の等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Matrix44I.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返す
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Matrix44I.Clone">
            <summary>
            このインスタンスの複製を作成する
            </summary>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="T:Altseed.RectF">
            <summary>
            <see cref="T:System.Single"/>型の矩形を表す構造体
            </summary>
        </member>
        <member name="F:Altseed.RectF.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="F:Altseed.RectF.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="F:Altseed.RectF.Width">
            <summary>
            幅
            </summary>
        </member>
        <member name="F:Altseed.RectF.Height">
            <summary>
            高さ
            </summary>
        </member>
        <member name="M:Altseed.RectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="width">幅</param>
            <param name="height">高さ</param>
        </member>
        <member name="M:Altseed.RectF.#ctor(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">サイズ</param>
        </member>
        <member name="M:Altseed.RectF.Equals(Altseed.RectF,Altseed.RectF)">
            <summary>
            2つの<see cref="T:Altseed.RectF"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定する矩形1</param>
            <param name="v2">等価性を判定する矩形2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectF.Equals(Altseed.RectF)">
            <summary>
            もう1つの<see cref="T:Altseed.RectF"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.RectF"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectF.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectF.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.RectF.ToI">
            <summary>
            同じ値を持つ<see cref="T:Altseed.RectI"/>の新しいインスタンスを生成する
            </summary>
            <returns>同じ値を持つ<see cref="T:Altseed.RectI"/>の新しいインスタンス</returns>
        </member>
        <member name="T:Altseed.RectI">
            <summary>
            <see cref="T:System.Int32"/>型の矩形を表す構造体
            </summary>
        </member>
        <member name="F:Altseed.RectI.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="F:Altseed.RectI.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="F:Altseed.RectI.Width">
            <summary>
            幅
            </summary>
        </member>
        <member name="F:Altseed.RectI.Height">
            <summary>
            高さ
            </summary>
        </member>
        <member name="M:Altseed.RectI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="width">幅</param>
            <param name="height">高さ</param>
        </member>
        <member name="M:Altseed.RectI.#ctor(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">サイズ</param>
        </member>
        <member name="M:Altseed.RectI.Equals(Altseed.RectI,Altseed.RectI)">
            <summary>
            2つの<see cref="T:Altseed.RectI"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定する矩形1</param>
            <param name="v2">等価性を判定する矩形2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectI.Equals(Altseed.RectI)">
            <summary>
            もう1つの<see cref="T:Altseed.RectI"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.RectI"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectI.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.RectI.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.RectI.ToF">
            <summary>
            同じ値を持つ<see cref="T:Altseed.RectF"/>の新しいインスタンスを生成する
            </summary>
            <returns>同じ値を持つ<see cref="T:Altseed.RectF"/>の新しいインスタンス</returns>
        </member>
        <member name="T:Altseed.Vector2F">
            <summary>
            <see cref="T:System.Single"/>型の二次元ベクトルを表す構造体
            </summary>
        </member>
        <member name="F:Altseed.Vector2F.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="F:Altseed.Vector2F.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="P:Altseed.Vector2F.Degree">
            <summary>
            ベクトルの度数法の角度を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Vector2F.Normal">
            <summary>
            このベクトルの単位ベクトル取得します。
            </summary>
        </member>
        <member name="P:Altseed.Vector2F.Length">
            <summary>
            ベクトルの長さを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Vector2F.Radian">
            <summary>
            ベクトルの弧度法の角度を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Vector2F.SquaredLength">
            <summary>
            ベクトルの長さの2乗取得します。
            </summary>
        </member>
        <member name="M:Altseed.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
        </member>
        <member name="M:Altseed.Vector2F.Equals(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つの<see cref="T:Altseed.Vector2F"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2F.Equals(Altseed.Vector2F)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector2F"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector2F"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性をが認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2F.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2F.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector2F.Normalize">
            <summary>
            単位ベクトル化します。
            </summary>
        </member>
        <member name="M:Altseed.Vector2F.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector2F.To2I">
            <summary>
            <see cref="T:Altseed.Vector2I"/>に型変換します。
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector2I"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector2F.Cross(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルの外積を求めます。
            </summary>
            <param name="left">使用するベクトル1</param>
            <param name="right">使用するベクトル2</param>
            <returns><paramref name="left"/>と<paramref name="right"/>の外積</returns>
        </member>
        <member name="M:Altseed.Vector2F.Distance(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトル間の距離を求めます。
            </summary>
            <param name="v1">距離を求めるベクトル1</param>
            <param name="v2">距離を求めるベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間の距離</returns>
        </member>
        <member name="M:Altseed.Vector2F.Dot(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルの内積を求めます。
            </summary>
            <param name="v1">使用するベクトル1</param>
            <param name="v2">使用するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の内積</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Addition(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_UnaryNegation(Altseed.Vector2F)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Subtraction(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Multiply(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y)</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Multiply(Altseed.Vector2F,System.Single)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Multiply(System.Single,Altseed.Vector2F)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Division(Altseed.Vector2F,Altseed.Vector2F)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y)</returns>
        </member>
        <member name="M:Altseed.Vector2F.op_Division(Altseed.Vector2F,System.Single)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar)</returns>
        </member>
        <member name="T:Altseed.Vector2I">
            <summary>
            <see cref="T:System.Int32"/>型の二次元ベクトルを表す構造体
            </summary>
        </member>
        <member name="F:Altseed.Vector2I.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="F:Altseed.Vector2I.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="M:Altseed.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
        </member>
        <member name="M:Altseed.Vector2I.Equals(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つの<see cref="T:Altseed.Vector2I"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2I.Equals(Altseed.Vector2I)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector2I"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector2I"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2I.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector2I.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector2I.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector2I.To2F">
            <summary>
            <see cref="T:Altseed.Vector2F"/>に型変換します。
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector2F"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector2I.Cross(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルの外積を求めます。
            </summary>
            <param name="left">使用するベクトル1</param>
            <param name="right">使用するベクトル2</param>
            <returns><paramref name="left"/>と<paramref name="right"/>の外積</returns>
        </member>
        <member name="M:Altseed.Vector2I.Distance(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2点間の距離取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>v1とv2の距離</returns>
        </member>
        <member name="M:Altseed.Vector2I.Dot(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルの内積を求めます。
            </summary>
            <param name="v1">使用するベクトル1</param>
            <param name="v2">使用するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の内積</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Addition(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_UnaryNegation(Altseed.Vector2I)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Subtraction(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Multiply(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y)</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Multiply(Altseed.Vector2I,System.Int32)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Multiply(System.Int32,Altseed.Vector2I)">
            <summary>
            ベクトルと値を積算する
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Division(Altseed.Vector2I,Altseed.Vector2I)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y)</returns>
        </member>
        <member name="M:Altseed.Vector2I.op_Division(Altseed.Vector2I,System.Int32)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar)</returns>
        </member>
        <member name="T:Altseed.Vector3F">
            <summary>
            3次元ベクトル
            </summary>
        </member>
        <member name="F:Altseed.Vector3F.X">
            <summary>
            X成分
            </summary>
        </member>
        <member name="F:Altseed.Vector3F.Y">
            <summary>
            Y成分
            </summary>
        </member>
        <member name="F:Altseed.Vector3F.Z">
            <summary>
            Z成分
            </summary>
        </member>
        <member name="P:Altseed.Vector3F.Length">
            <summary>
            ベクトルの長さを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Vector3F.Normal">
            <summary>
            このベクトルの単位ベクトルを取得します。
            </summary>
        </member>
        <member name="P:Altseed.Vector3F.SquaredLength">
            <summary>
            ベクトルの長さの二乗を取得します。
            </summary>
        </member>
        <member name="M:Altseed.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X成分</param>
            <param name="y">Y成分</param>
            <param name="z">Z成分</param>
        </member>
        <member name="M:Altseed.Vector3F.Equals(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2つの<see cref="T:Altseed.Vector3F"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3F.Equals(Altseed.Vector3F)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector3F"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector3F"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性をが認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3F.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3F.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector3F.Normalize">
            <summary>
            このベクトルを単位ベクトル化します。
            </summary>
        </member>
        <member name="M:Altseed.Vector3F.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector3F.To3I">
            <summary>
            <see cref="T:Altseed.Vector3I"/>に型変換します。
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector3I"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector3F.Cross(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            外積を取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>外積v1×v2</returns>
            <remarks>
            右手の親指がv1、人差し指がv2としたとき、中指の方向を返します。。
            </remarks>
        </member>
        <member name="M:Altseed.Vector3F.Dot(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            内積を取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>内積v1・v2</returns>
        </member>
        <member name="M:Altseed.Vector3F.Distance(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2点間の距離を取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>v1とv2の距離</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Addition(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_UnaryNegation(Altseed.Vector3F)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Subtraction(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Multiply(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y, v1.Z * v2.Z)</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Multiply(Altseed.Vector3F,System.Single)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Multiply(System.Single,Altseed.Vector3F)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Division(Altseed.Vector3F,Altseed.Vector3F)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y, left.Z / right.Z)</returns>
        </member>
        <member name="M:Altseed.Vector3F.op_Division(Altseed.Vector3F,System.Single)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar, vector.Z / scalar)</returns>
        </member>
        <member name="T:Altseed.Vector3I">
            <summary>
            3次元ベクトル
            </summary>
        </member>
        <member name="F:Altseed.Vector3I.X">
            <summary>
            X成分
            </summary>
        </member>
        <member name="F:Altseed.Vector3I.Y">
            <summary>
            Y成分
            </summary>
        </member>
        <member name="F:Altseed.Vector3I.Z">
            <summary>
            Z成分
            </summary>
        </member>
        <member name="M:Altseed.Vector3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X成分</param>
            <param name="y">Y成分</param>
            <param name="z">Z成分</param>
        </member>
        <member name="M:Altseed.Vector3I.Equals(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2つの<see cref="T:Altseed.Vector3I"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3I.Equals(Altseed.Vector3I)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector3I"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector3I"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性をが認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3I.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector3I.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector3I.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector3I.To3F">
            <summary>
            <see cref="T:Altseed.Vector3F"/>に型変換します。
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector3F"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector3I.Cross(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            外積取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>外積v1×v2</returns>
            <remarks>
            右手の親指がv1、人差し指がv2としたとき、中指の方向を返します。。
            </remarks>
        </member>
        <member name="M:Altseed.Vector3I.Distance(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2点間の距離取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>v1とv2の距離</returns>
        </member>
        <member name="M:Altseed.Vector3I.Dot(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            内積取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>内積v1・v2</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Addition(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_UnaryNegation(Altseed.Vector3I)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Subtraction(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Multiply(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y, v1.Z * v2.Z)</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Multiply(Altseed.Vector3I,System.Int32)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Multiply(System.Int32,Altseed.Vector3I)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Division(Altseed.Vector3I,Altseed.Vector3I)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y, left.Z / right.Z)</returns>
        </member>
        <member name="M:Altseed.Vector3I.op_Division(Altseed.Vector3I,System.Int32)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar, vector.Z / scalar)</returns>
        </member>
        <member name="T:Altseed.Vector4F">
            <summary>
            4次元ベクトル
            </summary>
        </member>
        <member name="F:Altseed.Vector4F.X">
            <summary>
            X成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4F.Y">
            <summary>
            Y成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4F.Z">
            <summary>
            Z成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4F.W">
            <summary>
            W成分
            </summary>
        </member>
        <member name="P:Altseed.Vector4F.Length">
            <summary>
            ベクトルの長さを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.Vector4F.Normal">
            <summary>
            このベクトルの単位ベクトル取得します。
            </summary>
        </member>
        <member name="P:Altseed.Vector4F.SquaredLength">
            <summary>
            ベクトルの長さの二乗取得します。
            </summary>
        </member>
        <member name="M:Altseed.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="z">Z座標</param>
            <param name="w">W座標</param>
        </member>
        <member name="M:Altseed.Vector4F.Equals(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2つの<see cref="T:Altseed.Vector4F"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4F.Equals(Altseed.Vector4F)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector4F"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector4F"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性をが認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4F.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4F.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector4F.Normalize">
            <summary>
            このベクトルを単位ベクトル化します。
            </summary>
        </member>
        <member name="M:Altseed.Vector4F.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector4F.To4I">
            <summary>
            <see cref="T:Altseed.Vector4I"/>に型変換する
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector4I"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector4F.Distance(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2点間の距離取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>v1とv2の距離</returns>
        </member>
        <member name="M:Altseed.Vector4F.Dot(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            外積取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>外積v1×v2</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Addition(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_UnaryNegation(Altseed.Vector4F)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Subtraction(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Multiply(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y, v1.Z * v2.Z, v1.W * v2.W)</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Multiply(Altseed.Vector4F,System.Single)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Multiply(System.Single,Altseed.Vector4F)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Division(Altseed.Vector4F,Altseed.Vector4F)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y, left.Z / right.Z, left.W / right.W)</returns>
        </member>
        <member name="M:Altseed.Vector4F.op_Division(Altseed.Vector4F,System.Single)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar, vector.Z / scalar, vector.W / scalar)</returns>
        </member>
        <member name="T:Altseed.Vector4I">
            <summary>
            4次元ベクトル
            </summary>
        </member>
        <member name="F:Altseed.Vector4I.X">
            <summary>
            X成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4I.Y">
            <summary>
            Y成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4I.Z">
            <summary>
            Z成分
            </summary>
        </member>
        <member name="F:Altseed.Vector4I.W">
            <summary>
            W成分
            </summary>
        </member>
        <member name="M:Altseed.Vector4I.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="z">Z座標</param>
            <param name="w">W座標</param>
        </member>
        <member name="M:Altseed.Vector4I.Equals(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2つの<see cref="T:Altseed.Vector4I"/>間の等価性を判定します。
            </summary>
            <param name="v1">等価性を判定するベクトル1</param>
            <param name="v2">等価性を判定するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4I.Equals(Altseed.Vector4I)">
            <summary>
            もう1つの<see cref="T:Altseed.Vector4I"/>との等価性を判定します。
            </summary>
            <param name="other">比較する<see cref="T:Altseed.Vector4I"/>のインスタンス</param>
            <returns><paramref name="other"/>等価性をが認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4I.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定します。
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue、それ以外でfalse</returns>
        </member>
        <member name="M:Altseed.Vector4I.GetHashCode">
            <summary>
            このオブジェクトのハッシュコードを返します。
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:Altseed.Vector4I.ToString">
            <summary>
            このベクトルを表す文字列取得します。
            </summary>
            <returns>このベクトルを表す文字列取得します。</returns>
        </member>
        <member name="M:Altseed.Vector4I.To4F">
            <summary>
            <see cref="T:Altseed.Vector4F"/>に型変換する
            </summary>
            <returns>このインスタンスと等価な<see cref="T:Altseed.Vector4F"/>の新しいインスタンス</returns>
        </member>
        <member name="M:Altseed.Vector4I.Dot(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            外積取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>外積v1×v2</returns>
        </member>
        <member name="M:Altseed.Vector4I.Distance(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2点間の距離取得します。
            </summary>
            <param name="v1">v1ベクトル</param>
            <param name="v2">v2ベクトル</param>
            <returns>v1とv2の距離</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Addition(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2つのベクトルを加算します。
            </summary>
            <param name="v1">加算するベクトル1</param>
            <param name="v2">加算するベクトル2</param>
            <returns><paramref name="v1"/>と<paramref name="v2"/>の和</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_UnaryNegation(Altseed.Vector4I)">
            <summary>
            ベクトルの符号を反転します。
            </summary>
            <param name="vector">符合を反転するベクトル</param>
            <returns><paramref name="vector"/>の逆符合版</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Subtraction(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2つのベクトルを減算します。
            </summary>
            <param name="left">減算されるベクトル</param>
            <param name="right">減算するベクトル</param>
            <returns>減算結果</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Multiply(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2つのベクトルを積算します。
            </summary>
            <param name="v1">積算するベクトル1</param>
            <param name="v2">積算するベクトル2</param>
            <returns>積算結果(v1.X * v2.X, v1.Y * v2.Y, v1.Z * v2.Z, v1.W * v2.W)</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Multiply(Altseed.Vector4I,System.Int32)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="vector">積算するベクトル</param>
            <param name="scalar">積算する値</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Multiply(System.Int32,Altseed.Vector4I)">
            <summary>
            ベクトルと値を積算します。
            </summary>
            <param name="scalar">積算する値</param>
            <param name="vector">積算するベクトル</param>
            <returns>積算結果</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Division(Altseed.Vector4I,Altseed.Vector4I)">
            <summary>
            2つのベクトルを除算します。
            </summary>
            <param name="left">除算されるベクトル</param>
            <param name="right">除算するベクトル</param>
            <returns>除算結果(left.X / right.X, left.Y / right.Y, left.Z / right.Z, left.W / right.W)</returns>
        </member>
        <member name="M:Altseed.Vector4I.op_Division(Altseed.Vector4I,System.Int32)">
            <summary>
            ベクトルを値で除算します。
            </summary>
            <param name="vector">除算されるベクトル</param>
            <param name="scalar">除算する値</param>
            <returns>除算結果(vector.X / scalar, vector.Y / scalar, vector.Z / scalar, vector.W / scalar)</returns>
        </member>
        <member name="P:Altseed.CameraNode.Group">
            <summary>
            描画対象とする <see cref="T:Altseed.DrawnNode"/> のグループを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.CameraNode.#ctor">
            <summary>
            新しいインスタンスを生成する
            </summary>
        </member>
        <member name="P:Altseed.CameraNode.Transform">
            <summary>
            変形行列を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.CameraNode.TargetTexture">
            <summary>
            描画先のテクスチャを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.Transform">
            <summary>
            変形行列を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.Angle">
            <summary>
            角度(度数法)を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.Position">
            <summary>
            座標を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.CenterPosition">
            <summary>
            回転の中心となる座標を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.Scale">
            <summary>
            拡大率を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.TurnLR">
            <summary>
            左右を反転するかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.TurnUL">
            <summary>
            上下を反転するかどうかを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.ZOrder">
            <summary>
            描画時の重ね順を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.DrawnNode.CameraGroup">
            <summary>
            このノードを描画するカメラを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.DrawnNode.UpdateTransform">
            <summary>
            <see cref="P:Altseed.DrawnNode.Transform"/>を更新する
            </summary>
        </member>
        <member name="T:Altseed.Node">
            <summary>
            ゲームシーンを構成するノードを表します。
            </summary>
        </member>
        <member name="M:Altseed.Node.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:Altseed.Node.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="P:Altseed.Node.Parent">
            <summary>
            親ノードを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.Node.Added(Altseed.Node)">
            <summary>
            <paramref name="owner"/> に登録された際の処理
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Altseed.Node.Removed">
            <summary>
            親要素から削除されたときの処理
            </summary>
        </member>
        <member name="M:Altseed.Node.Registered">
            <summary>
            エンジンに登録され、木を辿って<see cref="T:Altseed.RootNode"/> にたどり着けるようになったとき実行
            </summary>
        </member>
        <member name="M:Altseed.Node.Unregistered">
            <summary>
            エンジンから削除され、木を辿って<see cref="T:Altseed.RootNode"/> にたどり着けなくなったとき実行
            </summary>
        </member>
        <member name="P:Altseed.Node.Children">
            <summary>
            子要素のコレクションを取得します。
            </summary>
        </member>
        <member name="M:Altseed.Node.AddChildNode(Altseed.Node)">
            <summary>
            子要素を追加します。
            </summary>
            <param name="node">追加する要素</param>
        </member>
        <member name="M:Altseed.Node.RemoveChildNode(Altseed.Node)">
            <summary>
            子要素を削除します。
            </summary>
            <param name="node">削除する要素</param>
        </member>
        <member name="M:Altseed.Node.OnAdded">
            <summary>
            エンジンに追加された時に実行します。
            </summary>
            <remarks>
            自身もしくは親ノードがEngineに登録されたあとのUpdateの際に実行されます。
            </remarks>
        </member>
        <member name="M:Altseed.Node.OnRemoved">
            <summary>
            エンジンから削除された時に実行
            </summary>
            <remarks>
            自身もしくは親ノードがEngineにから削除されたあとのUpdateの際に実行されます。
            </remarks>
        </member>
        <member name="M:Altseed.Node.OnUpdate">
            <summary>
            自身が更新された時に実行
            </summary>
        </member>
        <member name="M:Altseed.Node.EnumerateAncestors">
            <summary>
            先祖ノードを列挙します。
            </summary>
        </member>
        <member name="M:Altseed.Node.EnumerateDescendants">
            <summary>
            子孫ノードを列挙します。
            </summary>
        </member>
        <member name="M:Altseed.Node.EnumerateDescendants``1">
            <summary>
            <typeparamref name="T"/> 型の子孫ノードを列挙します。
            </summary>
        </member>
        <member name="M:Altseed.Node.EnumerateDescendants``1(System.Func{``0,System.Boolean})">
            <summary>
            <typeparamref name="T"/>型の子孫ノードのうち <paramref name="condition"/> を満たすものを列挙します。
            </summary>
        </member>
        <member name="P:Altseed.PolygonNode.Src">
            <summary>
            描画範囲を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.PolygonNode.Texture">
            <summary>
            描画するテクスチャを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.PolygonNode.Material">
            <summary>
            描画に適用するマテリアルを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.PolygonNode.Vertexes">
            <summary>
            描画に適用するマテリアルを取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.PolygonNode.#ctor">
            <summary>
            新しいインスタンスを生成します。
            </summary>
        </member>
        <member name="M:Altseed.PolygonNode.Draw">
            <summary>
            描画を実行します。
            </summary>
        </member>
        <member name="M:Altseed.PolygonNode.SetVertexes(Altseed.Vector2F[])">
            <summary>
            頂点情報を設定する
            </summary>
            <param name="vertexes">設定する各頂点の座標を格納する配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexes"/>がnull</exception>
        </member>
        <member name="M:Altseed.PolygonNode.SetAllVertexColor(Altseed.Color)">
            <summary>
            各頂点に指定した色を設定する
            </summary>
            <param name="color">設定する色</param>
        </member>
        <member name="T:Altseed.SpriteNode">
            <summary>
            テクスチャを描画するノードを表します。
            </summary>
        </member>
        <member name="P:Altseed.SpriteNode.Src">
            <summary>
            描画範囲を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.SpriteNode.Texture">
            <summary>
            描画するテクスチャを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.SpriteNode.Material">
            <summary>
            使用するマテリアルを取得または設定します
            </summary>
        </member>
        <member name="M:Altseed.SpriteNode.#ctor">
            <summary>
            新しいインスタンスを生成します。
            </summary>
        </member>
        <member name="M:Altseed.SpriteNode.Draw">
            <summary>
            描画を実行します。
            </summary>
        </member>
        <member name="P:Altseed.TextNode.Text">
            <summary>
            描画する文字列を取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.TextNode.Font">
            <summary>
            文字列の描画に使用するフォントを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.TextNode.Material">
            <summary>
            使用するマテリアルを取得または設定します。
            </summary>
        </member>
        <member name="P:Altseed.TextNode.Weight">
            <summary>
            文字の太さを取得または設定します。(0 ~ 255)
            </summary>
        </member>
        <member name="P:Altseed.TextNode.Color">
            <summary>
            色を取得または設定します。
            </summary>
        </member>
        <member name="M:Altseed.TextNode.#ctor">
            <summary>
            新しいインスタンスを生成します。
            </summary>
        </member>
        <member name="M:Altseed.TextNode.Draw">
            <summary>
            描画を実行します。
            </summary>
        </member>
    </members>
</doc>
